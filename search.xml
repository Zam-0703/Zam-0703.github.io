<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux初体验</title>
      <link href="/2019/11/02/Linux%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2019/11/02/Linux%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本来想装物理机Linux，做个双系统，但是奈何本机硬件不算主流（Ryzen 7 3700u with Radeon Vega Mobile Gfx）,担心在物理机上安Arch会出现驱动兼容性问题，遂作罢，改用VMware安装虚拟机，还可以顺带做网安组的Task，美滋滋。</p><h1 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h1><h2 id="VMware的安装"><a href="#VMware的安装" class="headerlink" title="VMware的安装"></a>VMware的安装</h2><p>下载地址：<a href="https://www.nocmd.com/740.html" target="_blank" rel="noopener">https://www.nocmd.com/740.html</a><br>安装无脑下一步即可</p><h2 id="Arch-Linux镜像"><a href="#Arch-Linux镜像" class="headerlink" title="Arch Linux镜像"></a>Arch Linux镜像</h2><p>下载地址：<a href="http://mirrors.zju.edu.cn/archlinux/iso/2019.10.01/" target="_blank" rel="noopener">http://mirrors.zju.edu.cn/archlinux/iso/2019.10.01/</a> （浙大源）<br>下载链接地址中的archlinux-2019.10.01-x86_64.iso<br>若此地址下载缓慢，也可以进入官方的下载源集合：<a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">https://www.archlinux.org/download/</a></p><h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><h2 id="VMware配置"><a href="#VMware配置" class="headerlink" title="VMware配置"></a>VMware配置</h2><p>打开VMware，首先点击文件选项 -&gt; 新建虚拟机 -&gt; 典型 -&gt; 稍后安装操作系统 -&gt; 选择Linux选项 -&gt; 版本选择‘Linux4.x’，内存按需分配就可以，硬盘分配40G左右，根据自己需求来定，毕竟Arch一开始还算一个比较干净简洁轻量的Linux release。网络类型选择NAT，其他默认即可。<br>CD/DVD选项记得选择ArchLinux镜像。</p><h2 id="Arch-Linux安装准备"><a href="#Arch-Linux安装准备" class="headerlink" title="Arch Linux安装准备"></a>Arch Linux安装准备</h2><h3 id="启动安装archlinux"><a href="#启动安装archlinux" class="headerlink" title="启动安装archlinux"></a>启动安装archlinux</h3><p>不论你使用的是EFI或BIOS引导，均选择Boot Arch Linux(x86_64)这一选项<br>启动成功后就会进入命令行模式，此时如果你不清楚你用的是EFI引导还是BIOS引导，可以在此处列出efivars目录以验证启动模式来判断主板是以何种方式引导系统的（这对之后对硬盘的分区 <strong>十分有用</strong>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /sys/firmware/efi/efivars</span><br></pre></td></tr></table></figure><p>若该目录不存在，系统就可能以BIOS模式启动。</p><h3 id="确认网络连接情况"><a href="#确认网络连接情况" class="headerlink" title="确认网络连接情况"></a>确认网络连接情况</h3><p>如果你使用的是有线网络连接方式，那么Arch Linux在启动后，守护进程dhcpcd已被默认启用以探测有线设备，因此你只需验证网络是否正常即可<br>如果你使用的是无线网络连接方式，<br>Arch Linux的安装必须使用网络才能完成，使用下面命令以验证网络是否正常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 4 www.baidu.com</span><br></pre></td></tr></table></figure><p>如果网络不正常，可能是由于dhcp服务没有开启，可以使用以下命令来开启此服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable dhcpcd.service</span><br></pre></td></tr></table></figure><h3 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h3><p>首先还是验证一下系统的时间是否正常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl status</span><br></pre></td></tr></table></figure><p>如果时间和当前时间对不上的话，使用下面命令来更新系统时间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-ntp true</span><br></pre></td></tr></table></figure><h3 id="建立硬盘分区"><a href="#建立硬盘分区" class="headerlink" title="建立硬盘分区"></a>建立硬盘分区</h3><p>硬盘如果被系统识别到，就会被分配为一个块设备，如/dev/sda；因此先查看一下硬盘的状态，以便于后续分区操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p>屏幕显示如下：<br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/lsblk%E8%BE%93%E5%87%BA.jng" alt="lsblk输出"><br>这里sda即是我分配给虚拟机的8GB硬盘，因为此硬盘下还没有分区，所以sda节点下无任何显示；loop0和sr0可以忽略。如果硬盘已经有分区，sda节点下应当会显示如下图：<br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E5%88%86%E5%8C%BA%E5%AE%8C%E6%AF%95%E5%90%8E%E6%98%BE%E7%A4%BA.png" alt="分区完毕后显示"><br>接下来我们要对这8GB的硬盘进行分区，能够创建分区的命令很多，如fdisk，parted，cfdisk等，这里使用GUI的cfdisk命令（在真机上分区时，请认真检查你的硬盘是否选择正确，如果你有多个硬盘，可能你要用来安装Linux的硬盘并不是如下所写的/dev/sda，而是/dev/sdb也说不定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfdisk /dev/sda</span><br></pre></td></tr></table></figure><p>对于一个硬盘，以下三个分区是必须要有的：<br>··· 一个根分区（挂载在根目录）  /<br>··· 如果 UEFI 模式被启用，你还需要一个 EFI 系统分区，或者是通过BIOS启动，那么你需要建立的是BIOS boot分区<br>··· Swap 可以在一个独立的分区上设置，也可以直接建立交换文件<br>其中，Swap分区的大小应与你物理机/虚拟机的内存大小相同，EFI分区通常为300M，BIOS boot分区通常为1G</p><p>具体cfdisk的使用命令，可以参考这篇文章：<a href="https://jingyan.baidu.com/article/ce09321bb922da2bff858fdd.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/ce09321bb922da2bff858fdd.html</a></p><p>分好区后确认写入分区到硬盘，然后退出分区工具，再次使用lsblk查看一下，显示如下图：<br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA.png" alt="硬盘分区"><br>那么你就成功分好区了</p><h3 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h3><p>分区完成后，需要对分区做格式化处理，如果你使用了EFI分区，因为EFI分区需要FAT32文件格式，所以需要将其格式化为FAT32格式；<br>EFI引导分区推荐大小为512M。<br>在这里我使用的是BIOS引导，但为了方便起见，我也将它格式化成FAT32文件格式。<br>根分区格式化为ext4格式；设置并开启Swap分区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkfs.fat -F32 /dev/sda2</span><br><span class="line">mkfs.ext4 /dev/sda3</span><br><span class="line">mkfs.ext4 /dev/sda4</span><br><span class="line">mkswap /dev/sda1 -L Swap</span><br><span class="line">swapon /dev/sda1</span><br></pre></td></tr></table></figure><h3 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h3><h4 id="EFI模式引导"><a href="#EFI模式引导" class="headerlink" title="EFI模式引导"></a>EFI模式引导</h4><p>格式化完成后，需要将分区挂载到 /mnt ，先挂载根分区（这里是/dev/sda2）；再挂载EFI分区（这里是/dev/sda1），挂载EFI分区时，需要在/mnt上先创建 boot/EFI  目录，然后将EFI分区挂载到/mnt/boot/EFI上；Sawp分区不需要挂载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda3 /mnt</span><br><span class="line">mkdir -p /mnt/boot/EFI</span><br><span class="line">mount /dev/sda2 /mnt/boot/EFI</span><br></pre></td></tr></table></figure><h4 id="BIOS模式引导"><a href="#BIOS模式引导" class="headerlink" title="BIOS模式引导"></a>BIOS模式引导</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda4 /mnt        注：sda4挂载为根</span><br><span class="line">mkdir /mnt/boot        注：在 /  分区中创建/boot文件夹</span><br><span class="line">mkdir /mnt/home        注：在 / 分区中创建home文件夹</span><br><span class="line">mount /dev/sda2 /mnt/boot    注：将sda2分区挂载到/mnt/boot文件夹内</span><br><span class="line">mount /dev/sda3 /mnt/home    注：将sda3分区挂载到/mnt/home文件夹内</span><br></pre></td></tr></table></figure><h2 id="安装基本系统"><a href="#安装基本系统" class="headerlink" title="安装基本系统"></a>安装基本系统</h2><h3 id="选择软件镜像源"><a href="#选择软件镜像源" class="headerlink" title="选择软件镜像源"></a>选择软件镜像源</h3><p>在安装基本系统之前，需要修改一下软件镜像源，不然安装基本系统时会安装不上。镜像源列表在 /etc/pacman.d/mirrorlist  文件中。</p><p>我们选择软件镜像源时，最好选择国内的镜像源，因为国内网络环境的关系，选择其他国家或地区的镜像源，安装时可能很慢或失败也不一定。</p><p>下面这段代码首先添加了阿里巴巴镜像源到一个新文件（此处为mrlist），然后从mirrolist文件中选出所有国内镜像源追加到mrlist中，然后将mirrorlist文件的内容追加在mrlist的最后面，最后将mrlist重命名为mirrorlsit：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;## China\nServer = http://mirrors.aliyun.com/archlinux/$repo/os/$arch&apos; &gt; mrlist</span><br><span class="line">grep -A 1 &apos;China&apos; /etc/pacman.d/mirrorlist|grep -v &apos;\-\-&apos; &gt;&gt; mrlist</span><br><span class="line">cat /etc/pacman.d/mirrorlist &gt;&gt; mrlist</span><br><span class="line">mv mrlist /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>执行完以上命令后，可以使用以下命令来查看mirrorlist文件是否修改成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>按下Ctrl+X退出查看<br>若修改成功，会看到mirrorlist文件中的开头的内容全是国内的镜像源</p><h3 id="开始安装系统"><a href="#开始安装系统" class="headerlink" title="开始安装系统"></a>开始安装系统</h3><p>修改完软件镜像源后，然后就可以开始安装系统了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap -i /mnt base base-devel vim linux linux-firmware</span><br></pre></td></tr></table></figure><p><strong>注意，在安装环节就需要安装linux 和 linux-firmware两个包，不然会导致内核没有安装导致grub引导失败进不去系统</strong><br>使用-i选项会在实际安装前进行确认；安装 base-devel组，可以让我们通过 AUR (简体中文) 或者 ABS (简体中文) 编译安装软件包，如果不需要通过AUR或ABS安装软件包，则只需要安装base组就可以了 。</p><h2 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h2><h3 id="Fstab"><a href="#Fstab" class="headerlink" title="Fstab"></a>Fstab</h3><p>Linux的文件结构是单个的树状结构。最顶部的为根目录，即/。在根目录下，分为多个子目录，包括/bin、/boot、/dev、/etc、/home、/lib、/media、/mnt、/opt、/proc、/root、/sbin、/tmp、/usr和/var等。<br>磁盘Linux分区都必须挂载到目录树中的某个具体的目录上才能进行读写操作，而fstab正是负责这一配置。</p><p>因此，在基本系统安装完成后，用以下命令生成 fstab 文件 (用 -U 或 -L 选项设置UUID 或卷标)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p>然后使用以下命令检查一下生成的fstab文件是否正确：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p>如果生成的fstab文件正确，会看到之前分的4个分区的信息。</p><h3 id="Chroot"><a href="#Chroot" class="headerlink" title="Chroot"></a>Chroot</h3><p>chroot命令用来在指定的根目录下运行指令<br>切换到新安装的系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure><p>chroot之后，当前目录就变成为 /  。此步会自动进行创建初始的ramdisk环境，但是如果以后更改了内核配置了的话，最好使用一下命令再重新生成ramdisk环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkinitcpio -p linux</span><br></pre></td></tr></table></figure><h3 id="配置时区"><a href="#配置时区" class="headerlink" title="配置时区"></a>配置时区</h3><p>将系统时区设为东八区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Chongqing /etc/localtime</span><br></pre></td></tr></table></figure><p>设置时间标准为UTC，并调整时间漂移：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hwclock --systohc --utc</span><br></pre></td></tr></table></figure><h3 id="配置Locale"><a href="#配置Locale" class="headerlink" title="配置Locale"></a>配置Locale</h3><p>locale文件对系统的使用地区和语言等进行配置。在/etc/locale.gen文件中进行配置。<br>locale.gen是一个仅包含注释文档的文本文件。指定需要的本地化类型，只需移除对应行前面的注释符号（＃）即可，使用下面命令打开locale.gen文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/locale.gen</span><br></pre></td></tr></table></figure><p>然后找到下面2项，去掉每项前面的#即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br></pre></td></tr></table></figure><p>使用locale-gen命令生成Locale信息，并列出所有启用的Locale：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">locale-gen</span><br><span class="line">locale -a</span><br></pre></td></tr></table></figure><p>最后创建locale.conf文件，并提交所要使用的本地化选项，然后使用locale命令显示当前正在使用的Locale和相关的环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</span><br><span class="line">locale</span><br></pre></td></tr></table></figure><p>/etc/locale.conf用来配置整个系统所使用的Loacle，而这也可以由用户通过用户自己的 <del>/.config/locale.conf （</del>表示当前用户的Home目录）来覆盖整个系统的Locale配置。<br>建立 /etc/skel/.config/locale.conf 文件，可以在新用户的建立（新用户的建立见下文）且同时创建用户主目录（useradd -m）时，自动应用其中的Locale（会将此文件复制到新建用户的 ~/.config/locale.conf 中）。<br><em>不推荐此时设置任何中文locale，因为这样做可能会导致tty显示乱码。</em></p><h3 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h3><p>要设置主机名，创建 /etc/hostname 文件并将主机名写入该文件即可。我的主机名为Zam-laptop：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo Zam-laptop &gt; /etc/hostname</span><br></pre></td></tr></table></figure><p>然后配置主机名对应的IP到 /etc/hosts  中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/hosts</span><br></pre></td></tr></table></figure><p>将其中的主机名改为你自己的主机名（我这里是Zam-laptop）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1    localhost.localdomain    localhost</span><br><span class="line">::1          localhost.localdomain    localhost</span><br><span class="line">127.0.1.1    Zam-laptop.localdomain   Zam-laptop</span><br></pre></td></tr></table></figure><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>若使用有线网络的话，由于在Base包里已经不包括联网所需的程序，所以需要下载dhcp客户端:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S dhcpcd</span><br></pre></td></tr></table></figure><p>若使用无线网络的话，则安装以下几个软件包（因为我使用的是虚拟机，并未验证过）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S iw wpa_supplicant dialog</span><br></pre></td></tr></table></figure><h3 id="设置Root用户密码"><a href="#设置Root用户密码" class="headerlink" title="设置Root用户密码"></a>设置Root用户密码</h3><p>设置root密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>然后输入两次密码即可。</p><h3 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h3><p>因为使用root用户登陆后，root用户拥有系统的所有操作权限，这样对系统的操作非常不安全（如一不小心删库，你就要开始跑路），所以需要新建一个普通用户，让其对系统的操作受到一定限制，使用下面命令新建用户zam：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -G wheel -s /bin/bash zam</span><br></pre></td></tr></table></figure><p>命令解释：<br>-m：创建用户主目录（/home/[用户名]）<br>-G：用户要加入的附加组列表；此处将用户加到wheel组中，之后可以给这个组执行sudo命令的权限<br>-s：指定了用户默认登录shell的路径，此处设置为bash的路径<br>更多创建新用户的使用请查看官方Arch Linux Wiki：<a href="https://wiki.archlinux.org/index.php/Users_and_groups_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Users_and_groups_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p><p>然后修改新创建用户的用户密码，和修改Root用户密码所使用的命令一样（只是需要指定要修改密码的用户名）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd zam</span><br></pre></td></tr></table></figure><p>然后输入两次密码即可。</p><p>以后大部分时间我们都将使用此普通用户来工作，但由于此用户的操作权限有限，有时会对很多操作带来不便，因此需要给该用户在某些情况下提权，这就需要允许该用户所在的wheel组有执行sudo命令的权限，此时需要修改 /etc/sudoers文件 ，但请不要直接修改此文件，而是用下面的命令修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure><p>使用上面命令打开sudoers文件后，删除wheel组前面的注释（#）即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## Uncomment to allow members of group wheel to execute any command</span><br><span class="line">%wheel ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><p>若执行visudo时，提示找不到vim，则请先安装vim后在执行上面的操作，执行下面指令安装vim：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S vim</span><br></pre></td></tr></table></figure><h3 id="安装grub"><a href="#安装grub" class="headerlink" title="安装grub"></a>安装grub</h3><p>grub是一个启动引导器，同时支持EFI和BIOS方式的启动。若使用的UEFI方式引导系统，则还需要安装efibootmgr，如果是双系统的话，还需要安装os-prober，且如果使用Intel CPU的话，则需要安装 intel-ucode 并启用 <a href="https://wiki.archlinux.org/index.php/Microcode_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">因特尔微码更新</a></p><p><strong>嘤特尔微码更新并不是一定需要开启</strong></p><ul><li><p>微码</p><blockquote><p>微码（microcode）就是由 Intel/AMD 提供的 CPU 固件。Linux 的内核可以在引导时更新 CPU 固件，而无需 BIOS 更新。处理器的微码保存在内存中，在每次启动系统时，内核可以更新这个微码。</p></blockquote><blockquote><p>这些来自 Intel/AMD 的微码的更新可以去修复 bug 或者使用补丁来防范 bug。例如前段时间爆出的<a href="https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/ADV180002" target="_blank" rel="noopener">幽灵(Spectre)与熔断(Meltdown)</a>漏洞，就可以通过更新微码来解决</p></blockquote></li><li><p>因此，最好还是启用因特尔微码更新，以保证自己的数据安全</p></li></ul><p>因为我使用的是虚拟机和BIOS引导方式，因此只需要安装grub：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S grub</span><br></pre></td></tr></table></figure><p>然后，还需要将其安装到BIOS boot分区当中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-install --recheck /dev/sda</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：此处的 /dev/sda 后没有数字。<br>最后还需要生成一个grub的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p>执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit #退出chroot环境，切换到光盘系统</span><br><span class="line">reboot #重启系统</span><br></pre></td></tr></table></figure><p>然后你就可以进入到grub的引导界面，选择Arch Linux，enjoy it！</p><h1 id="进阶安装"><a href="#进阶安装" class="headerlink" title="进阶安装"></a>进阶安装</h1><p>在重启之后，我们就已经成功地安装了ArchLinux,但是这时系统处于一个非常精简的状态,为了日常使用,我们必须安装一些需要的组件,来完善我们的系统功能。</p><h2 id="预先准备：启动DHCP服务"><a href="#预先准备：启动DHCP服务" class="headerlink" title="预先准备：启动DHCP服务"></a>预先准备：启动DHCP服务</h2><p>启动dhcp服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable dhcpcd.service</span><br></pre></td></tr></table></figure><p>以确保后续的下载软件包操作能够正常进行</p><h2 id="安装图形界面"><a href="#安装图形界面" class="headerlink" title="安装图形界面"></a>安装图形界面</h2><h3 id="安装Xorg"><a href="#安装Xorg" class="headerlink" title="安装Xorg"></a>安装Xorg</h3><p>Xorg是Linux下的一个著名的开源图形服务，我们的桌面环境需要Xorg的支持。<br>执行以下命令安装Xorg及相关组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xorg</span><br></pre></td></tr></table></figure><h3 id="安装Deepin-Desktop-Environment（DDE）"><a href="#安装Deepin-Desktop-Environment（DDE）" class="headerlink" title="安装Deepin Desktop Environment（DDE）"></a>安装Deepin Desktop Environment（DDE）</h3><p>作为国产的桌面操作环境，当然要滋磁一波<br>执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S deepin deepin-extra lightdm lightdm-deepin-greeter</span><br></pre></td></tr></table></figure><h3 id="安装其余实用软件"><a href="#安装其余实用软件" class="headerlink" title="安装其余实用软件"></a>安装其余实用软件</h3><p>deepin还提供了解压、下载工具等实用工具的下载<br>执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S file-roller evince gedit thunderbird gpicview</span><br><span class="line">sudo pacman -S unrar unzip p7zip</span><br></pre></td></tr></table></figure><h3 id="安装桌面管理器sddm"><a href="#安装桌面管理器sddm" class="headerlink" title="安装桌面管理器sddm"></a>安装桌面管理器sddm</h3><p><em>经过某李姓学长提醒，了解了sddm和lightdm都是图形化的桌面管理器，因此若上面安装deepin时已经安装了lightdm，接下来就不需要安装桌面管理器sddm了</em></p><p>安装好了桌面环境包以后，我们需要安装一个图形化的桌面管理器来帮助我们登录并且选择我们使用的桌面环境，sddm就是这样的一款管理器。<br>执行以下命令来安装sddm：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S sddm</span><br></pre></td></tr></table></figure><h3 id="设置开机启动sddm服务"><a href="#设置开机启动sddm服务" class="headerlink" title="设置开机启动sddm服务"></a>设置开机启动sddm服务</h3><p>使用systemctl命令：<code>sudo systemctl enable sddm</code>来启用sddm开机自启<br>设置lightdm开机自启同理</p><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><p>到现在我们已经安装好了桌面环境，但是还有一件事情需要我们提前设置一下。由于我们之前使用的一直都是netctl这个自带的网络服务，而桌面环境使用的是NetworkManager这个网络服务，所以我们需要禁用netctl并启用NetworkManager：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl disable netctl</span><br><span class="line">sudo systemctl enable NetworkManager</span><br></pre></td></tr></table></figure><p>同时你需要安装工具栏工具来显示网络设置图标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S network-manager-applet</span><br></pre></td></tr></table></figure><h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><p>重启之后就可以尽情地enjoy了</p><h2 id="下载编译安装最新最鬼酷的Linux内核"><a href="#下载编译安装最新最鬼酷的Linux内核" class="headerlink" title="下载编译安装最新最鬼酷的Linux内核"></a>下载编译安装最新最鬼酷的Linux内核</h2><p>注：为了完成之后的Patch任务，我这里就下载5.3版本的内核。下载最新版的内核同理。<br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E5%86%85%E6%A0%B8%E4%B9%8B%E5%89%8D.png" alt="编译安装内核之前"></p><h3 id="下载内核"><a href="#下载内核" class="headerlink" title="下载内核"></a>下载内核</h3><p>首先，我们当然要先去把内核下载到虚拟机中</p><p>由于某些特殊原因，国内访问国外的Kernel.org速度偏慢<br>那么就需要从国内的开源镜像站去下载内核<br>地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/kernel/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/kernel/</a></p><p>然后根据自己的喜好找到自己需要的内核，使用wget命令下载，并将其解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/kernel/v5.x/linux-5.3.tar.xz</span><br><span class="line">xz -d linux-5.3.tar.xz</span><br><span class="line">tar -xvf linux-5.3.tar</span><br></pre></td></tr></table></figure><h3 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h3><p>进入解压好的源码的根目录下，如果需要自定义选项，就执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p>会进入一个菜单，让你定制你自己的内核。<br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E5%AE%9A%E5%88%B6Kernel.png" alt="定制Kernel"><br>当然，你也可以使用缺省配置，执行以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcat /proc/config.gz &gt; .config #将当前内核的配置文件复制到此处</span><br></pre></td></tr></table></figure><p>并且不要忘记在 General Setup —&gt; 选项中或者复制来的config文件的”CONFIG_LOCALVERSION”一行的值来修改内核版本，这样可以避免编译的内核覆盖当前内核文件。<br>这样内核已经配置好了，下面就可以开始编译了<br>编译命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j 线程数</span><br></pre></td></tr></table></figure><h3 id="安装内核模块"><a href="#安装内核模块" class="headerlink" title="安装内核模块"></a>安装内核模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make modules_install ##把所有编译好的模块安装到正确的主目录/lib/modules下</span><br></pre></td></tr></table></figure><p>该命令将编译好的模块拷贝至 /lib/modules/<kernel version>-<config local version>，例如 /lib/modules/3.18.28-ARCH。这样，这些模块和那些被你电脑上其他内核使用的模块就独立开来。</config></kernel></p><h3 id="拷贝内核到-boot-目录"><a href="#拷贝内核到-boot-目录" class="headerlink" title="拷贝内核到 /boot 目录"></a>拷贝内核到 /boot 目录</h3><p>内核编译完成后会生成内核的 bzImage (big zImage) 文件，根据系统架构，将此文件复制到 /boot 目录，以 5.3 内核为例：</p><p>32-bit (i686) kernel:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -v arch/x86/boot/bzImage /boot/vmlinuz-linux53</span><br></pre></td></tr></table></figure><p>64-bit (x86_64) kernel:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -v arch/x86_64/boot/bzImage /boot/vmlinuz-linux53</span><br></pre></td></tr></table></figure><h3 id="制作初始化内存盘"><a href="#制作初始化内存盘" class="headerlink" title="制作初始化内存盘"></a>制作初始化内存盘</h3><p>自动生成<br>复制和修改 mkinitcpio preset，就能用官方内核一样的方式生成自定义内核的 initramfs 镜像。下面例子中将已有的 preset 复制到 linux53 要使用的文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/mkinitcpio.d/linux.preset /etc/mkinitcpio.d/linux53.preset</span><br></pre></td></tr></table></figure><p>针对定制内核编辑和修改此文件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mkinitcpio.d/linux53.preset</span><br></pre></td></tr></table></figure><p>ALL_kver= 应该和定制内核匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/etc/mkinitcpio.d/linux53.preset</span><br><span class="line">...</span><br><span class="line">ALL_kver=&quot;/boot/vmlinuz-linux53&quot;</span><br><span class="line">...</span><br><span class="line">default_image=&quot;/boot/initramfs-linux53.img&quot;</span><br><span class="line">...</span><br><span class="line">fallback_image=&quot;/boot/initramfs-linux53-fallback.img&quot;</span><br></pre></td></tr></table></figure><p>用官方内核一样的方式生成 initramfs 镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkinitcpio -p linux53</span><br></pre></td></tr></table></figure><h3 id="拷贝System-map"><a href="#拷贝System-map" class="headerlink" title="拷贝System.map"></a>拷贝System.map</h3><p>将 System.map 复制到 /boot, 然后创建 /boot/System.map 软链接到 /boot/System.map-YourKernelName:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp System.map /boot/System.map-YourKernelName</span><br><span class="line">sudo ln -sf /boot/System.map-YourKernelName /boot/System.map</span><br></pre></td></tr></table></figure><h3 id="更新grub配置信息"><a href="#更新grub配置信息" class="headerlink" title="更新grub配置信息"></a>更新grub配置信息</h3><p>使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>来把我们刚刚配置好的内核添加到grub的启动配置中</p><h3 id="然后reboot就可以享受最新（更老）的kernel了！"><a href="#然后reboot就可以享受最新（更老）的kernel了！" class="headerlink" title="然后reboot就可以享受最新（更老）的kernel了！"></a>然后reboot就可以享受最新<del>（更老）</del>的kernel了！</h3><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E5%86%85%E6%A0%B8%E4%B9%8B%E5%90%8E.PNG" alt="编译安装内核之后"></p><h2 id="Patch自己的内核"><a href="#Patch自己的内核" class="headerlink" title="Patch自己的内核"></a>Patch自己的内核</h2><p>说实话，一开始看到要patch自己的内核，能够给出现象证明你的patch有效，我的心就拔凉拔凉的<br>Kernel里那么多东西，我咋看的过来哪些能改哪些不能改，改了会有什么效果啊我透……<br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/29412e0a494585b8.jpg" alt><br>后来转念一想，Patch最显著的现象不就是版本号升级了吗？！<br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/90455D42F926AF850A7ED03D05D614AB109D2.jpg" alt><br>于是就有了之前反向升级最新内核的操作</p><h3 id="下载Patch"><a href="#下载Patch" class="headerlink" title="下载Patch"></a>下载Patch</h3><p>地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/kernel/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/kernel/</a><br>依旧是打开那个熟悉的地址，然后找到自己对应的patch包，用wget命令下载即可。<br><strong>注意：如果你想跨版本升级，例如说现在是5.3，想要升级到5.3.8的内核，可以一步到位从5.3这个大版本用patch-5.3.8升级至5.3.8</strong></p><h3 id="解压Patch"><a href="#解压Patch" class="headerlink" title="解压Patch"></a>解压Patch</h3><p>使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xz -d patch-5.3.1.xz</span><br></pre></td></tr></table></figure><p>即可</p><h3 id="安装Patch"><a href="#安装Patch" class="headerlink" title="安装Patch"></a>安装Patch</h3><p>将解压出的Patch文件放在你想要打Patch的源代码文件夹的Kernel目录下 <strong>重要</strong></p><p>为确保内核树绝对干净，执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean &amp;&amp; make mrproper</span><br></pre></td></tr></table></figure><p>注意：由于patch文件中的文件路径包含了它所基于的内核源文件目录的名字(或者像是”a/“和”b/“之类的其它名字)。这很可能和你本地机器上的内核源代码目录的名字不匹配。你应该切换到你的内核源代码目录，并且在打补丁的时候去掉patch中文件名字路径的第一个分量(patch命令的-p1参数可以完成这个任务)。<br>因此我们在Kernel目录下直接执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patch -p1 &lt; ./patch-5.3.8.patch</span><br></pre></td></tr></table></figure><p>其余的patch文件依样画瓢即可</p><h3 id="编译Patch后的内核以及之后的步骤"><a href="#编译Patch后的内核以及之后的步骤" class="headerlink" title="编译Patch后的内核以及之后的步骤"></a>编译Patch后的内核以及之后的步骤</h3><p>这个就和之前的差不多，就不再叙说了~</p><h2 id="制作自己的Patch文件并打Patch。"><a href="#制作自己的Patch文件并打Patch。" class="headerlink" title="制作自己的Patch文件并打Patch。"></a>制作自己的Patch文件并打Patch。</h2><p>经过某李姓学长的提醒，我明白了这个任务其实是要我们自己动手修改kernel内核。<br>那么最简单的修改方法就是添加一个系统调用。</p><h3 id="修改源程序，增加系统调用实现"><a href="#修改源程序，增加系统调用实现" class="headerlink" title="修改源程序，增加系统调用实现"></a>修改源程序，增加系统调用实现</h3><p>假设你现在已经下好了kernel源文件并解压。在解压出的源代码文件夹内执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ./kernel/sys.c</span><br></pre></td></tr></table></figure><p>在sys.c的末尾加入以下函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">asmlinkage <span class="keyword">void</span> <span class="title">sys_helloworld</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  printk(“hello world”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E4%BF%AE%E6%94%B9sys.c-2.png" alt="修改sys.c"></p><h3 id="修改头文件，增加系统调用声明"><a href="#修改头文件，增加系统调用声明" class="headerlink" title="修改头文件，增加系统调用声明"></a>修改头文件，增加系统调用声明</h3><p><strong>注意：我在修改之后的系统调用后才发现520已经被占，因此之后图里所有的520都被改成了436，也推荐大家以后新增调用时先去看看syscall_64.tbl文件的内容。</strong><br>使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ./include/uapi/asm-generic/unistd.h</span><br></pre></td></tr></table></figure><p>来添加系统调用的声明<br>在文件的最末尾处添加如下代码：<br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%A3%B0%E6%98%8E.png" alt="添加系统调用声明"><br>再使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ./include/linux/syscalls.h</span><br></pre></td></tr></table></figure><p>在文件的最末尾处添加如下代码：<br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E6%B7%BB%E5%8A%A0%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E.png" alt="添加函数声明"></p><h3 id="注册系统调用"><a href="#注册系统调用" class="headerlink" title="注册系统调用"></a>注册系统调用</h3><p>进入<code>/arch/x86/entry/syscalls</code>目录<br>可以看到以下内容：<br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/syacalls%E6%96%87%E4%BB%B6%E5%A4%B9%E5%86%85%E5%AE%B9.png" alt="syacalls文件夹内容"><br>32位系统就添加到syscall_32.tbl，64位就修改syscall_64.tbl<br>我这里是64位，因此我应该修改syscall_64.tbl。<br>按着顺序往下添加即可，中间使用Tab键分隔。如图所示：<br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/436.png" alt></p><h3 id="生成Patch文件"><a href="#生成Patch文件" class="headerlink" title="生成Patch文件"></a>生成Patch文件</h3><p>在这里，我就假设你已经修改好了文件。<br>比如基于kernel内核 做了修改，修改前的内容放在文件夹kernel下，修改后的内容放在文件夹kernel_new下，并且两个目录在同级的文件夹里，那么制作patch文件的命令为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff -Naur kernel/    kernel_new/ &gt; new.patch</span><br></pre></td></tr></table></figure><p>然后接下来的步骤和上面的 <strong>安装Patch</strong> 部分相同，不再赘述。</p><h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E6%BA%90%E4%BB%A3%E7%A0%81%E4%BB%A5%E5%8F%8A%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%90%8Edmesg%E7%BB%93%E6%9E%9C.png" alt="源代码以及程序运行后dmesg结果"></p><h1 id="几个踩坑的点"><a href="#几个踩坑的点" class="headerlink" title="几个踩坑的点"></a>几个踩坑的点</h1><h2 id="一开始只安装了Base包"><a href="#一开始只安装了Base包" class="headerlink" title="一开始只安装了Base包"></a>一开始只安装了Base包</h2><p>网上的远古教程指导我说安装了Base包就行了，然而Arch Linux似乎把Linux内核从Base包当中分离了出来，所以一开始只安装Base包导致grub找不到内核一直引导失败。<br>这个惨痛的经历告诉我们，以后不管装什么，<strong>都要看官方wiki</strong>，避免踩坑。</p><h2 id="在编译内核时config文件没有配置好"><a href="#在编译内核时config文件没有配置好" class="headerlink" title="在编译内核时config文件没有配置好"></a>在编译内核时config文件没有配置好</h2><p>一开始直接用<code>make defconfig</code>命令，编译了一个几乎啥都不带的内核。之后才明白如果想沿用当前系统设置应该用<code>zcat /proc/config.gz &gt; .config</code>命令。<br>还好有 <em>善意的提醒</em> 不然又得从头再来。</p><h2 id="在Patch时报错，提示patch-rejected"><a href="#在Patch时报错，提示patch-rejected" class="headerlink" title="在Patch时报错，提示patch rejected"></a>在Patch时报错，提示patch rejected</h2><p>这是因为我用了tuna的patch包，这个包是用来一步到位从5.3升级到5.3.8的，而要想从5.3.7升级到5.3.8，则需要从 <a href="https://www.kernel.org" target="_blank" rel="noopener">https://www.kernel.org</a> 上下载Inc.patch包。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> syscall </tag>
            
            <tag> Patch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用VMware搭建小型局域网</title>
      <link href="/2019/10/26/%E4%BD%BF%E7%94%A8VMware%E6%90%AD%E5%BB%BA%E5%B0%8F%E5%9E%8B%E5%B1%80%E5%9F%9F%E7%BD%91/"/>
      <url>/2019/10/26/%E4%BD%BF%E7%94%A8VMware%E6%90%AD%E5%BB%BA%E5%B0%8F%E5%9E%8B%E5%B1%80%E5%9F%9F%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><h2 id="安装VMware"><a href="#安装VMware" class="headerlink" title="安装VMware"></a>安装VMware</h2><p>下载地址：<a href="https://www.nocmd.com/740.html" target="_blank" rel="noopener">https://www.nocmd.com/740.html</a><br>安装无脑下一步即可</p><h2 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h2><p>镜像下载地址：<a href="https://cn.ubuntu.com/download" target="_blank" rel="noopener">https://cn.ubuntu.com/download</a><br>最新版的VMware支持Ubuntu的简易安装，所以在配置时直接填好主机名用户名密码就可以愉快的食用Ubuntu了</p><h1 id="配置局域网"><a href="#配置局域网" class="headerlink" title="配置局域网"></a>配置局域网</h1><h2 id="在虚拟网络编辑器中配置网关以及网段"><a href="#在虚拟网络编辑器中配置网关以及网段" class="headerlink" title="在虚拟网络编辑器中配置网关以及网段"></a>在虚拟网络编辑器中配置网关以及网段</h2><p>在VMware主页面 编辑–》虚拟网络编辑器<br>单击箭头所指按钮，给编辑器提升权限以更改设置</p><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E6%9B%B4%E6%94%B9%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%BC%96%E8%BE%91%E5%99%A8%E8%AE%BE%E7%BD%AE.png" alt="更改虚拟网络编辑器设置"></p><p>我们使用NAT模式，所以选择VMnet8。（记住这个名称，稍后还会用到）<br>不勾选【使用本地DHCP】服务这个复选框，因为我们要求固定IP，DHCP是动态分配IP的。<br>首先，我们将子网IP设置成我们需要的IP地址所在的网段，即192.168.188.0，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E6%9B%B4%E6%94%B9VMnet8%E5%AD%90%E7%BD%91IP.png" alt="更改VMnet8子网IP"></p><p>点击NAT设置。<br>我们将网关IP设置成我们需要的IP地址192.168.188.2，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E6%9B%B4%E6%94%B9VMnet8%E7%BD%91%E5%85%B3%E8%AE%BE%E7%BD%AE.png" alt="更改VMnet8网关设置"></p><p>然后再选择Host-only模式的网卡VMnet1<br>同理，不勾选【使用本地DHCP】服务这个复选框。<br>首先，我们将子网IP设置成我们需要的IP地址所在的网段，即192.168.188.0，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E6%9B%B4%E6%94%B9VMnet1%E5%AD%90%E7%BD%91IP.png" alt="更改VMnet1子网IP"></p><h2 id="在控制面板中配置虚拟网卡IP"><a href="#在控制面板中配置虚拟网卡IP" class="headerlink" title="在控制面板中配置虚拟网卡IP"></a>在控制面板中配置虚拟网卡IP</h2><p>在VMware中更改了虚拟网络之后，我们还需要去宿主机的网络控制面板中更改网络适配器，才能让我们的虚拟主机能够正常的上网<br>在控制面版中找到VMware Network Adapter VMnet8，也就是我们之前记住的使用NAT模式的那张网卡<br>双击图标后，在弹出的窗口中单击属性–&gt;双击Internet协议版本4<br>将弹出的窗口设置成如图所示的亚子：</p><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E6%8E%A7%E5%88%B6%E9%9D%A2%E6%9D%BF%E8%AE%BE%E7%BD%AE.png" alt="控制面板设置"></p><h2 id="到此，配置局域网的工作暂告一段落"><a href="#到此，配置局域网的工作暂告一段落" class="headerlink" title="到此，配置局域网的工作暂告一段落"></a>到此，配置局域网的工作暂告一段落</h2><h1 id="打开三台虚拟机，进行最后的指向操作"><a href="#打开三台虚拟机，进行最后的指向操作" class="headerlink" title="打开三台虚拟机，进行最后的指向操作"></a>打开三台虚拟机，进行最后的指向操作</h1><h2 id="对于充当路由器和DNS服务器的虚拟机VM1"><a href="#对于充当路由器和DNS服务器的虚拟机VM1" class="headerlink" title="对于充当路由器和DNS服务器的虚拟机VM1"></a>对于充当路由器和DNS服务器的虚拟机VM1</h2><p>首先打开VM1的IP转发功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>把net.ipv4.ip_forward = 0改成1，或者是将注释符删去，如图所示：</p><p>![更改VM1 IP转发.png](<a href="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/更改VM1" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/更改VM1</a> IP转发.png)</p><p>使用<code>sysctl -p</code>命令使改动生效。</p><p>然后再将用于与VM2和VM3通信的网卡手动分配下IP<br>注意，此时一定要分清哪张网卡是工作在NAT模式下，用于与宿主机通信的；哪张是工作在Host-Only模式下，用于与两个虚拟机通信的。<br>所以在开始更改网卡配置之前，需要先执行<code>ifconfig</code>确定网卡的具体信息</p><p>从ubuntu从17.10开始，已经不再在/etc/network/interfaces里配置IP，即使配置了也不会生效，而是改成netplan方式 ，配置写在/etc/netplan/文件夹里或者类似名称的yaml文件里。因此，我们应先查看/etc/netplan文件夹下的文件，来判断我们需要修改的是什么文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/netplan</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E6%9F%A5%E7%9C%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.PNG" alt="输出结果"></p><p>从而确定下一步的命令为：<code>sudo nano 01-network-manager-all.yaml</code></p><p>经过我的甄别，确定网卡ens38是那张工作在Host-Only模式下的网卡、ens33是那张工作在NAT模式下的网卡，于是乎按照任务要求，如图所示编辑两张网卡的配置：</p><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E6%9B%B4%E6%94%B9netplan1.PNG" alt="更改netplan"></p><p>之后运行命令<code>netplan apply</code>来应用这一设置</p><p>到这里，对VM1的操作就告一段落</p><h2 id="对于VM2和VM3"><a href="#对于VM2和VM3" class="headerlink" title="对于VM2和VM3"></a>对于VM2和VM3</h2><p>照葫芦画瓢，首先执行<code>ifconfig</code>确定网卡的具体信息，再更改netplan的配置信息。<br>具体操作过程与VM1大差不差，就直接放按着任务要求配置好的netplan了。</p><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/VM2netplan.PNG" alt="VM2 netplan"></p><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/VM3netplan.PNG" alt="VM3 netplan"></p><p>然后就可以实现VM1,VM2,VM3三台机器的互ping</p><h1 id="对VM2与VM3进行NAT转换"><a href="#对VM2与VM3进行NAT转换" class="headerlink" title="对VM2与VM3进行NAT转换"></a>对VM2与VM3进行NAT转换</h1><p>但是，经过上述的操作，VM2与VM3却不能ping通VM1的网关和公网。有句话说得好，不能连公网的主机和咸鱼没啥区别。因此，我们需要用iptables实现NAT转换，使得B和C能够访问(ping)A的网关和公网。</p><p>具体的NAT操作过程示例，可以参照这篇blog中SNAT部分，再根据具体的环境配置iptables的参数：<a href="https://www.zsythink.net/archives/1764" target="_blank" rel="noopener">https://www.zsythink.net/archives/1764</a></p><p>在此次任务中，命令为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -s 10.1.2.0/24 -j SNAT --to-source 192.168.188.128</span><br></pre></td></tr></table></figure><p>执行之后就可以在VM2与VM3两台“内网”机器中愉快的连上公网了~</p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><ul><li><p>1.netplan apply时遇到格式错误</p><blockquote><p>错误原因：YAML文件对格式的要求非常严格。在冒号后少打一个空格都会导致文件读取错误。</p></blockquote><blockquote><p>解决方法：重新检查一遍YAML文件格式是否正确，有没有少打空格。并在之后多多注意格式问题</p></blockquote></li><li><p>2.在执行命令中多次出现Permission Denied</p><blockquote><p>错误原因：因为这次任务中涉及到对网络配置等系统关键文件进行修改的操作，所以需要su权限才能进行命令的执行。</p></blockquote><blockquote><p>解决方法：在之后的命令行输入时，涉及到对系统文件、系统环境的修改时要记得加上sudo。</p></blockquote><blockquote><p>不能因为sudo麻烦而直接使用root用户登录。不然没准哪天你就会不小心删库跑路</p></blockquote></li></ul><h1 id="Task-Over"><a href="#Task-Over" class="headerlink" title="Task Over"></a>Task Over</h1><p>然而还差12h工时……绝了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Dian CyberSecurity Team </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AST-Task2</title>
      <link href="/2019/10/16/AST-Task2/"/>
      <url>/2019/10/16/AST-Task2/</url>
      
        <content type="html"><![CDATA[<p><strong>注意，本文编译环境为Visual Studio 2019 on Windows 10 1903 X64</strong></p><h1 id="几个练手题"><a href="#几个练手题" class="headerlink" title="几个练手题"></a>几个练手题</h1><h2 id="1-编程实现：用户给定一个整数，将该整数逆置之后输出。（如：输入123，输出321）。"><a href="#1-编程实现：用户给定一个整数，将该整数逆置之后输出。（如：输入123，输出321）。" class="headerlink" title="1.编程实现：用户给定一个整数，将该整数逆置之后输出。（如：输入123，输出321）。"></a>1.编程实现：用户给定一个整数，将该整数逆置之后输出。（如：输入123，输出321）。</h2><h3 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h3><p>a.给定整数，不要用字符串来完成。<br>b.尽可能使时间复杂度小。<br>c.要求能够完成214748364792这个数字的逆置。</p><h3 id="程序源码"><a href="#程序源码" class="headerlink" title="程序源码"></a>程序源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> input;</span><br><span class="line">scanf_s(<span class="string">"%lld"</span>, &amp;input);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> output = <span class="number">0</span>, digit;</span><br><span class="line"><span class="keyword">while</span> (input &gt; <span class="number">0</span>) &#123;</span><br><span class="line">digit = input % <span class="number">10</span>;<span class="comment">//取当前最末位数</span></span><br><span class="line">output = output * <span class="number">10</span> + digit;<span class="comment">//将当前的最末位数加到待输出结果的最后一位</span></span><br><span class="line">input /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, output);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###运行结果<br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E6%95%B4%E6%95%B0%E9%80%86%E7%BD%AE.png" alt="整数逆置"></p><h2 id="2-编程实现：给定一串任意字符串。要求，将其中的所有整数提取出来并存入整数数组"><a href="#2-编程实现：给定一串任意字符串。要求，将其中的所有整数提取出来并存入整数数组" class="headerlink" title="2.编程实现：给定一串任意字符串。要求，将其中的所有整数提取出来并存入整数数组"></a>2.编程实现：给定一串任意字符串。要求，将其中的所有整数提取出来并存入整数数组</h2><h3 id="给定样例"><a href="#给定样例" class="headerlink" title="给定样例"></a>给定样例</h3><p>1023fase415#145#</p><h3 id="程序源码-1"><a href="#程序源码-1" class="headerlink" title="程序源码"></a>程序源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> p, q;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, r = <span class="number">0</span>,count = <span class="number">0</span>;<span class="comment">//i用于控制输出，r用于控制字符串内查找,count用于计算字符串内数字个数</span></span><br><span class="line"></span><br><span class="line">gets(str);</span><br><span class="line"></span><br><span class="line">r = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (str[r] &amp;&amp; (str[r]&lt;<span class="string">'0'</span> || str[r]&gt;<span class="string">'9'</span>))</span><br><span class="line">r++;        <span class="comment">//跳过字符串中非数字部分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (str[r])</span><br><span class="line">&#123;</span><br><span class="line">p = r;      <span class="comment">//p指向数字子串开头</span></span><br><span class="line">q = r + <span class="number">1</span>;  <span class="comment">//q寻找数字串结尾</span></span><br><span class="line">a[i] = str[r] - <span class="string">'0'</span>;<span class="comment">//将字符串中的0变为数字0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (str[q] &gt;= <span class="string">'0'</span> &amp;&amp; str[q] &lt;= <span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = <span class="number">10</span> * a[i] + (str[q] - <span class="string">'0'</span>);<span class="comment">//计算数字</span></span><br><span class="line">q++;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">r = q;    <span class="comment">//设定新起点</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E6%8F%90%E5%8F%96%E6%95%B4%E6%95%B0.png" alt="提取整数"></p><h2 id="3-编程实现：给定一串任意字符串。要求，将其中的所有数字提取出来并存入double数组。"><a href="#3-编程实现：给定一串任意字符串。要求，将其中的所有数字提取出来并存入double数组。" class="headerlink" title="3.编程实现：给定一串任意字符串。要求，将其中的所有数字提取出来并存入double数组。"></a>3.编程实现：给定一串任意字符串。要求，将其中的所有数字提取出来并存入double数组。</h2><h3 id="给定样例-1"><a href="#给定样例-1" class="headerlink" title="给定样例"></a>给定样例</h3><p>10.23fase4.15#14.5#</p><h3 id="程序源码-2"><a href="#程序源码-2" class="headerlink" title="程序源码"></a>程序源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">1000</span>], num[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">double</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> p, q;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, r = <span class="number">0</span>,count = <span class="number">0</span>;<span class="comment">//i用于控制循环，r用于控制字符串内查找,count用于计算字符串内数字个数</span></span><br><span class="line"></span><br><span class="line">gets(str);</span><br><span class="line"></span><br><span class="line">r = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (str[r] &amp;&amp; (str[r]&lt;<span class="string">'0'</span> || str[r]&gt;<span class="string">'9'</span>)) &#123;<span class="comment">//查找数字字串开头部分</span></span><br><span class="line">r++;       </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str[r])</span><br><span class="line">&#123;</span><br><span class="line">p = r;      <span class="comment">//p指向数字子串开头</span></span><br><span class="line">q = r + <span class="number">1</span>;  <span class="comment">//q寻找数字串结尾</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((str[q] &gt;= <span class="string">'0'</span> &amp;&amp; str[q] &lt;= <span class="string">'9'</span>)||str[q]==<span class="string">'.'</span>)&#123;</span><br><span class="line">q++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; q-p; i++) &#123;<span class="comment">//将数字字串转存到新字符串中，用于后续转化输出</span></span><br><span class="line">num[i] = str[p + i];</span><br><span class="line">&#125;</span><br><span class="line">num[i] = <span class="string">'\0'</span>;</span><br><span class="line">a[count] = atof(num);</span><br><span class="line">count++;</span><br><span class="line">r = q;    <span class="comment">//设定新起点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf "</span>, a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E6%8F%90%E5%8F%96%E6%95%B0%E5%AD%97.png" alt="提取数字"></p><h1 id="几个烧脑题"><a href="#几个烧脑题" class="headerlink" title="几个烧脑题"></a>几个烧脑题</h1><h2 id="多级指针：观察下列代码，思考并解释程序运行结果"><a href="#多级指针：观察下列代码，思考并解释程序运行结果" class="headerlink" title="多级指针：观察下列代码，思考并解释程序运行结果"></a>多级指针：观察下列代码，思考并解释程序运行结果</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><h4 id="程序代码及解释"><a href="#程序代码及解释" class="headerlink" title="程序代码及解释"></a>程序代码及解释</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> * c[] = &#123; <span class="string">"ENTER"</span>, <span class="string">"NEW"</span>, <span class="string">"POINT"</span>, <span class="string">"FIRST"</span> &#125;;<span class="comment">//定义了四个指针c[0]-c[3]分别指向四个字符串</span></span><br><span class="line"><span class="keyword">char</span>** cp[] = &#123; c + <span class="number">3</span>, c + <span class="number">2</span>, c + <span class="number">1</span>, c &#125;;<span class="comment">//定义了一个二级指针数组，其中的cp[0]-cp[3]分别依次对应c[3]-c[0]</span></span><br><span class="line"><span class="keyword">char</span>*** cpp = cp;<span class="comment">//定义了一个三级指针，指向二级指针数组的第一个元素cp[0]，此时cpp就相当于c[3]</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ** ++cpp);<span class="comment">//** cpp经过间接引用运算后相当于是指针cp，指针cp自增后指向的是指针数组cp[]中的第二个元素,也即是c[2]</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, * --* ++cpp + <span class="number">3</span>);<span class="comment">//首先对指针cpp作了自增操作，使得cpp指向cp[2],此时cpp中的地址为c+1，再通过自减符使得指针 * cpp即cp[2] (注意不是cpp)的地址变为c，这时候*--* ++cpp相当于指向了一个字符数组&#123;'E','N','T','E','R'&#125;的首地址。+3的操作等价于在这个字符数组的首地址的基础上再右移三个地址，指向了第二个E，然后通过printf将第二个E和之后的所有剩余字符全部打印。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, * cpp[<span class="number">-2</span>] + <span class="number">3</span>);<span class="comment">//经过了上一条语句后，cpp指向cp[2],那么cpp[-2]指向cp[0]（注意，此时cpp内存储的地址并没有改变）,即c[3]此时的*cpp[-2]就相当于指向了一个字符数组&#123;'F','I','R','S','T'&#125;的首地址。+3的操作等价于在这个字符数组的首地址的基础上再右移三个地址，指向了S，然后通过printf将S和之后的所有剩余字符全部打印。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, * cpp[<span class="number">-1</span>][<span class="number">-1</span>] + <span class="number">1</span>);<span class="comment">//同上理，此时cpp指向cp[2],cpp[-1]就会指向cp[1]，即c[2],那么cpp[-1][-1]就相当于指向c[1],即一个字符数组&#123;'N','E','W'&#125;的首地址。+1的操作等价于在这个字符数组的首地址的基础上再右移1个地址，指向了E，然后通过printf将E和之后的所有剩余字符全部打印。</span></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="上机验证"><a href="#上机验证" class="headerlink" title="上机验证"></a>上机验证</h4><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/20191019223002.png" alt="上机验证"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><h4 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> Num;</span><br><span class="line"><span class="keyword">char</span>* pcName;</span><br><span class="line"><span class="keyword">short</span> sDate;</span><br><span class="line"><span class="keyword">char</span> cha[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">short</span> sBa[<span class="number">4</span>];</span><br><span class="line">&#125;*p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p = <span class="number">0x100000</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%p\n"</span>, p + <span class="number">0x1</span>);<span class="comment">//输出00100014</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%p\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)p + <span class="number">0x1</span>);<span class="comment">//输出00100001</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%p\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>*)p + <span class="number">0x1</span>);<span class="comment">//输出00100004</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>首先要明确，指针与整数的加减法公式为 p = p +/- sizeof（type * p）</p><p>第一行输出00100014的原因是结构体Test的存储空间大小为sizeof(int) + sizeof(char* ) + sizeof(short) + sizeof(char)* 2 + sizeof(short)* 4 = 20,并且指针的地址是以十六进制数存放的，因此p + 0x1就相当于指针p向后移动了sizeof(Test)的内存大小，因此输出的内存地址比1000000大20，为00100014。</p><p>第二行输出001000001的原因是(unsigned long)语句将* p转换成了整数类型，因此此时做的只是普通的整数与整数之间的加减法。</p><p>第三行输出00100004的原因是 (unsigned int<em>)语句将Test</em> 类型的p指针转换成了int * 类型，根据公式此时sizeof(int*) = 4,因此输出00100004。</p><h4 id="上机验证-1"><a href="#上机验证-1" class="headerlink" title="上机验证"></a>上机验证</h4><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E4%B8%8A%E6%9C%BA%E9%AA%8C%E8%AF%812.png" alt="上机验证"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><h4 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码"></a>程序代码</h4><p>#include &lt;stdio.h&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> * ptr1 = (<span class="keyword">int</span> * )(&amp;a + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> * ptr2 = (<span class="keyword">int</span> * )((<span class="keyword">int</span>)a + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%x\n%x\n"</span>, ptr1[<span class="number">-1</span>], * ptr2);\\输出<span class="number">4</span> <span class="number">2000000</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><p>首先，&amp;a指的是取数组a的地址，而&amp;a + 1指的是加上一个int a[4]的长度，即sizeof(int) * 4=16字节，所以ptr1指向数组a后面的内存单元，如果用下标表示就是a[5]</p><p>由指针与整数的加减法公式p = p +/- sizeof（type * p，ptr1[-1]表示ptr1指向的地址再减去sizeof(int * )，即指向a[4]，所以第一个%x输出对应的是0x4.</p><p>(int)a+1的值就是元素a[0]的第二个字节的地址，然后把这个地址强制转化为（int<em>)类型赋给ptr2，也就是说</em>ptr2的值应该为元素a[0]的第二个字节开始的连续4个Byte的内容。</p><p>不过要想理解为什么输出了2000000，就要首先明白数字在数组中是怎么被存储的：</p><p>每个元素具体存储方式，取决于CPU。 有两种：<br>1、小端(Little Endian)：<br>将低序字节存储在起始地址（低位编址）, 地址低位存储值的低位，地址高位存储值的高位 。<br>目前大多数CPU是按照这种方式存储的，包括intel和移动端最常见的arm。<br>比如4字节整型值为0x12345678的情况，那么在内存中会存储为：<br>0x78 0x56 0x34 0x12<br>2、大端(Big Endian)：<br>与小端相反， 将高序字节存储在起始地址（高位编址），地址低位存储值的高位,地址高位存储值的低位。<br>之前的例子在大端情况下存储为：<br>0x12 0x34 0x56 0x78</p><p>因此，a[0]在内存中被存储为0x01 0x00 0x00 0x00,a[1]在内存中被存储为0x02 0x00 0x00 0x00，此时ptr2所指向的内存区域的值就是0x00 0x00 0x00 0x02</p><p>但是，在printf进行输出时，内存中的值是自右而左地被读出的，因此输出的值应该是0x02000000</p><h4 id="上机验证-2"><a href="#上机验证-2" class="headerlink" title="上机验证"></a>上机验证</h4><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E4%B8%8A%E6%9C%BA%E9%AA%8C%E8%AF%813.png" alt="上机验证"></p><h1 id="其余部分"><a href="#其余部分" class="headerlink" title="其余部分"></a>其余部分</h1><p><del>就先咕为敬了，告辞</del><br><del>有空再补</del><br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/1571031606850.gif" alt="咕咕咕"><br>好了我胡汉三又回来了</p><h2 id="malloc函数的使用"><a href="#malloc函数的使用" class="headerlink" title="malloc函数的使用"></a>malloc函数的使用</h2><p>在C语言中，malloc是动态内存分配函数。</p><p>它的原型声明在stdlib.h头文件中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_bytes)</span></span>;</span><br></pre></td></tr></table></figure><p>num_bytes 是无符号整型，用于表示分配的字节数。<br>这个函数的返回值：如果分配成功则返回指向被分配内存的指针void* (此存储区中的初始值不确定)，否则返回空指针NULL。<br>void* 表示未确定类型的指针，void * 可以指向任何类型的数据，更明确的说是指申请内存空间时还不知道用户是用这段空间来存储什么类型的数据（比如是char还是int或者…）<br>这个函数的功能很简单：就是分配长度为num_bytes字节的内存块。<br>注意：由于C语言中缺少内存回收机制，所以当内存不再使用时，应使用free()函数将内存块释放。函数返回的指针一定要适当对齐，例如说统一为4的倍数，使其可以用于任何数据对象。<br>关于该函数的原型，在以前malloc返回的是char型指针，新的ANSIC标准规定，该函数返回为void型指针，因此在使用是我们应要进行类型转换。<br>example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;//malloc()函数被包含在stdlib.h里面</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>*a=<span class="literal">NULL</span>; <span class="comment">//声明一个指向a的char*类型的指针</span></span><br><span class="line"></span><br><span class="line">a=(<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));<span class="comment">//使用malloc分配内存的首地址，然后赋值给a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!a)<span class="comment">//如果malloc失败，可以得到一些log</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"malloc"</span>);</span><br><span class="line"><span class="keyword">return</span><span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(a,<span class="string">"%s"</span>,<span class="string">"HelloWorld\n"</span>);<span class="comment">//"HelloWorld\n"写入a指向的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,a);<span class="comment">//输出上边写入a的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);<span class="comment">//释放掉使用的内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//例2有无内存泄露？</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且，作为一名合格的码农，我们应当对一些特殊情况进行特殊处理，如这里的malloc函数若调用失败，则直接让程序退出，而不是让其运行下去，否则可能会造成更大的bug，而且也不利于我们根据返回值进行debug。</p><h2 id="结构体指针-gt-的使用"><a href="#结构体指针-gt-的使用" class="headerlink" title="结构体指针-&gt;的使用"></a>结构体指针-&gt;的使用</h2><p>除了我们通过<code>结构体变量名.成员名</code>的方式引用结构体变量中的成员，我们还可以使用指针。<br>要想学会-&gt;这种指针的使用，首先我们就要学会一般的结构体指针使用方式：<br><code>(* 指针变量名).成员名</code><br>这个指针变量定义成什么类型呢？<br>只能定义成结构体类型，且指向什么结构体类型的结构体变量，就要定义成什么样的结构体类型。<br>比如指向 struct STUDENT 类型的结构体变量，那么指针变量就一定要定义成 struct STUDENT* 类型。<br>example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AGE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">STUDENT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];  <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">int</span> num;  <span class="comment">//学号</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AGE</span> <span class="title">birthday</span>;</span>  <span class="comment">//生日</span></span><br><span class="line">    <span class="keyword">float</span> score;  <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">STUDENT</span> <span class="title">student1</span>;</span> <span class="comment">/* 用struct STUDENT结构体类型定义结构体变量student1*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">STUDENT</span> * <span class="title">p</span> = <span class="title">NULL</span>;</span>  <span class="comment">/* 定义一个struct STUDENT结构体类型的指针变量p*/</span></span><br><span class="line">    p = &amp;student1;  <span class="comment">/* p指向结构体变量student1的首地址, 即第一个成员的地址*/</span></span><br><span class="line">    <span class="built_in">strcpy</span>((* p).name, <span class="string">"小明"</span>);  <span class="comment">//(* p).name等价于student1.name</span></span><br><span class="line">    (* p).birthday.year = <span class="number">1989</span>;</span><br><span class="line">    (* p).birthday.month = <span class="number">3</span>;</span><br><span class="line">    (* p).birthday.day = <span class="number">29</span>;</span><br><span class="line">    (* p).num = <span class="number">1207041</span>;</span><br><span class="line">    (* p).score = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"name : %s\n"</span>, (* p).name);  <span class="comment">//(* p).name不能写成p,即使p指向的是student1.name的地址。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"birthday : %d-%d-%d\n"</span>, (* p).birthday.year, (* p).birthday.month, (* p).birthday.day);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"num : %d\n"</span>, (* p).num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"score : %.1f\n"</span>, (* p).score);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name : 小明</span><br><span class="line">birthday : <span class="number">1989</span><span class="number">-3</span><span class="number">-29</span></span><br><span class="line">num : <span class="number">1207041</span></span><br><span class="line">score : <span class="number">100.0</span></span><br></pre></td></tr></table></figure><p>注意，* p 两边的括号不可省略，因为成员运算符“.”的优先级高于指针运算符“ * ”，所以如果 * p 两边的括号省略的话，那么 * p.num 就等价于 * (p.num) 了。<br>从该程序也可以看出：因为指针变量 p 指向的是结构体变量 student1 第一个成员的地址，即字符数组 name 的首地址，所以 p 和 (* p).name 是等价的。<br>但是，“等价”仅仅是说它们表示的是同一个内存单元的地址，但它们的类型是不同的。指针变量 p 是 struct STUDENT* 型的，而 (* p).name 是 char* 型的。所以在 strcpy 中不能将 (* p).name 改成 p。用 %s 进行输入或输出时，输入参数或输出参数也只能写成 (* p).name 而不能写成 p。<br>同样，虽然 &amp;student1 和 student1.name 表示的是同一个内存单元的地址，但它们的类型是不同的。&amp;student1 是 struct STUDENT* 型的，而 student1.name 是 char* 型的，所以在对 p 进行初始化时，“p=&amp;student1；”不能写成“p=student1.name”。因为 p 是 struct STUDENT* 型的，所以不能将 char* 型的 student1.name 赋给 p。C语言是一门强数据类型的语言，就在这里体现的淋漓尽致。<br>此外,为了使用的方便和直观，我们可以直接用<code>指针变量名-&gt;成员名</code>来代替。<br>p-&gt;num 的含义是：指针变量 p 所指向的结构体变量中的 num 成员。p-&gt;num 最终代表的就是 num 这个成员中的内容。<br>下面，我们可以用<code>指针变量名-&gt;成员名</code>的形式对我们刚刚的代码进行修改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AGE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">STUDENT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];  <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">int</span> num;  <span class="comment">//学号</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AGE</span> <span class="title">birthday</span>;</span>  <span class="comment">/* 用struct AGE结构体类型定义结构体变量birthday, 生日*/</span></span><br><span class="line">    <span class="keyword">float</span> score;  <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">STUDENT</span> <span class="title">student1</span>;</span> <span class="comment">/* 用struct STUDENT结构体类型定义结构体变量student1*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">STUDENT</span> * <span class="title">p</span> = <span class="title">NULL</span>;</span>  <span class="comment">/* 定义struct STUDENT结构体类型的指针变量p*/</span></span><br><span class="line">    p = &amp;student1;  <span class="comment">/* p指向结构体变量student1的首地址, 即第一项的地址*/</span></span><br><span class="line">    <span class="built_in">strcpy</span>(p-&gt;name, <span class="string">"小明"</span>);</span><br><span class="line">    p-&gt;birthday.year = <span class="number">1989</span>;</span><br><span class="line">    p-&gt;birthday.month = <span class="number">3</span>;</span><br><span class="line">    p-&gt;birthday.day = <span class="number">29</span>;</span><br><span class="line">    p-&gt;num = <span class="number">1207041</span>;</span><br><span class="line">    p-&gt;score = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"name : %s\n"</span>, p-&gt;name);  <span class="comment">//p-&gt;name不能写成p</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"birthday : %d-%d-%d\n"</span>, p-&gt;birthday.year, p-&gt;birthday.month, p-&gt;birthday.day);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"num : %d\n"</span>, p-&gt;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"score : %.1f\n"</span>, p-&gt;score);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出同上。</p><h2 id="链表的基本概念及简单使用"><a href="#链表的基本概念及简单使用" class="headerlink" title="链表的基本概念及简单使用"></a>链表的基本概念及简单使用</h2><p>学了三个月，终于学到了第一种数据结构类型：链表。<br>那么，链表它到底是个啥？<br>链表，链表，首先它得是个线性表。根据《数据结构》书中介绍，一个线性表是n个数据元素的有限序列，它的长度可根据需要增长或缩短，还有一系列对线性表的操作。线性表可分为顺序存储结构和链式存储结构两种。<br>那么今天所学习的链表，全称就叫链式存储结构线性表。<br>线性链表可分为单链表，循环链表，双链表。</p><p>线性表特点是用一组任意的存储单元存储线性表的数据元素，同时还存储一个指向后继信息的信息，这两部分信息组成为结点。<br>结点包含两部分数据域和指针域。指针域存储信息成为指针或链。链表中只包含一个指针域，故称为单链表。<br><img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=f56b157cdeca7bcb6976cf7ddf600006/b2de9c82d158ccbfebe4998510d8bc3eb1354130.jpg" alt="单链表"></p><p>下面通过c语言实现单链表的基本操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="comment">//上述是一些重命名和宏定义</span></span><br><span class="line"><span class="comment">//单链表的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    ElemType data;  <span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">next</span>;</span> <span class="comment">//指针域</span></span><br><span class="line">&#125;LNode，*LinkList;</span><br></pre></td></tr></table></figure><p>读取链表第i个元素的数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType *e)</span></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; j&lt;i)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p || j&gt;i)&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    * e = p-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在带头结点的链表L的第i个位置之前插入元素e:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line">    LNode p;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    p = L;</span><br><span class="line">    j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p || j&gt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkList s;</span><br><span class="line">    s = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next =s;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在带头结点的链表L，删除第i个位置的元素，并由e返回其值:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> i, ElemType &amp;e)</span></span>&#123;</span><br><span class="line">    LNode p;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    p = L;</span><br><span class="line">    j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!(p-&gt;next) || j&gt;i<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkList q;</span><br><span class="line">    q = p-&gt;next;</span><br><span class="line">    p = q-&gt;next;</span><br><span class="line">    e = q-&gt;data;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环链表是另外一种存储形式的链式存储结构，特点是表中最后一个结点的指针域指向头结点，与单链表比较相像，故不再赘述。<br>双向链表：是指针域指向前驱结点和后继结点。<br>存储结构为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> * <span class="title">prior</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;DuLNode, * DuLinkList;</span><br></pre></td></tr></table></figure><h2 id="链表延伸"><a href="#链表延伸" class="headerlink" title="链表延伸"></a>链表延伸</h2><p>1.编程创建一个单链表。可不断读取用户输入的整数并存储进链表里。并在最后将链表里面的数据打印出来。<br>2.编程实现：将上述任务中已经创建完毕的单链表逆置（如将1-&gt;2-&gt;3-&gt;4-&gt;null逆置为4-&gt;3-&gt;2-&gt;1-&gt;）</p><h3 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码"></a>程序代码</h3><p>简明起见，我将两个任务写在一个程序里了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUCCESS 10000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAILURE 10001</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Link;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">InitLink</span><span class="params">(Link** l)</span><span class="comment">//初始化链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">* l = (Link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Link));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == * l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">(* l)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">(* l)-&gt;data = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">InsertLink</span><span class="params">(Link* l, <span class="keyword">int</span> place, ElemType e)</span><span class="comment">//插入链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (place &gt; l-&gt;data + <span class="number">1</span> || place &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">Link* head = l;</span><br><span class="line"><span class="keyword">while</span> (k &lt; place)</span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line">l = l-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">Link* tmp = (Link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Link));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">tmp-&gt;next = l-&gt;next;</span><br><span class="line">l-&gt;next = tmp;</span><br><span class="line">tmp-&gt;data = e;</span><br><span class="line">head-&gt;data++;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TraverseLink</span><span class="params">(Link* l)</span><span class="comment">//遍历链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">length = l-&gt;data;</span><br><span class="line"><span class="keyword">while</span> (length &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">length--;</span><br><span class="line">l = l-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, l-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReverseList</span><span class="params">(Link* L)</span><span class="comment">//逆置链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Link* curnode = L-&gt;next; <span class="comment">//当前节点，指向表头</span></span><br><span class="line">Link* temp = curnode-&gt;next; <span class="comment">//临时节点</span></span><br><span class="line"></span><br><span class="line">curnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;next = curnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">curnode = temp;</span><br><span class="line">temp = curnode-&gt;next;</span><br><span class="line">curnode-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next = curnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SortInsert</span><span class="params">(Link* l, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> length, place;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">Link* head = l;</span><br><span class="line">length = l-&gt;data;</span><br><span class="line">l = l-&gt;next;</span><br><span class="line">place = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == length)&#123;</span><br><span class="line"> InsertLink(head, place + <span class="number">1</span>, e);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span> (place &lt; length)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (e &lt; l-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">InsertLink(head, place + <span class="number">1</span>, e);</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">l = l-&gt;next;</span><br><span class="line">place++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> == flag)</span><br><span class="line">&#123;</span><br><span class="line">InsertLink(head, length + <span class="number">1</span>, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Link* <span class="built_in">list</span>;</span><br><span class="line">ElemType e;</span><br><span class="line"></span><br><span class="line">InitLink(&amp;<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input numbers,input other character to end!\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(scanf_s(<span class="string">"%d"</span>,&amp;e) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input numbers,input other character to end!\n"</span>);</span><br><span class="line">SortInsert(<span class="built_in">list</span>, e);</span><br><span class="line"><span class="comment">// printf("Length = %d\n", list-&gt;data);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The output is :"</span>);</span><br><span class="line">TraverseLink(<span class="built_in">list</span>);</span><br><span class="line">ReverseList(<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nThe  reverse List output is: "</span>);</span><br><span class="line">TraverseLink(<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h3><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/%E9%93%BE%E8%A1%A8%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png" alt="程序运行结果"></p><h2 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h2><p>都不会做<br>好难啊<br>我太菜了<br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/29412e0a494585b8.jpg" alt><br><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/924112618.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> Learning </tag>
            
            <tag> Function&amp;Pointer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AST Task1</title>
      <link href="/2019/10/05/AST-Task1/"/>
      <url>/2019/10/05/AST-Task1/</url>
      
        <content type="html"><![CDATA[<h1 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h1><h2 id="0x01-C语言中的数据类型"><a href="#0x01-C语言中的数据类型" class="headerlink" title="0x01 C语言中的数据类型"></a>0x01 C语言中的数据类型</h2><h3 id="C语言中的常用数据类型"><a href="#C语言中的常用数据类型" class="headerlink" title="C语言中的常用数据类型"></a>C语言中的常用数据类型</h3><hr><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png%22C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%22" alt="C语言中的常用数据类型"></p><hr><h4 id="C语言中整型与字符型数据"><a href="#C语言中整型与字符型数据" class="headerlink" title="C语言中整型与字符型数据"></a>C语言中整型与字符型数据</h4><p>首先需要注意的是：</p><p>无符号(unsigned)整型数据与一般有符号整型数据的区别。</p><p>整型有无符号（unsigned）和有符号（signed）两种类型，在默认情况下声明的整型变量都是有符号的类型（char有点特别，需要根据具体编译环境确定），如果需声明无符号类型的话就需要在类型前加上unsigned。</p><p>无符号整型和有符号整型的区别就是无符号类型可以存放的正数范围比有符号整型中的范围大一倍，因为有符号类型将最高位储存符号，而无符号类型全都储存数字。</p><p>并且：</p><p>在C/C++语言中，int和long int的所占的字节数与编译环境有关。</p><p>C语言标准是这样规定的：int最少16位（2字节），long不能比int短，short不能比int长，具体位长由编译器开发商根据各种情况自己决定。</p><p>在老式的16位编译系统上，short、int、long普遍的长度是2字节、2字节、4字节。<br>在32位编译系统x86处理器上，short、int、long普遍的长度是2字节、4字节、4字节。int占四字节，与long相同。<br>在64位编译系统x64处理器上：short占两字节，int占四字节，long占8字节，long数据范围变为：-2^63~2^63-1</p><p>由此可见int类型的数据长度一般是机器位长。在16位编译系统中int为16位，两个字节；32位编译系统中int为32位，4个字节；但是在64位编译系统中为了兼容32位编译系统，64位编译系统的int也是4字节。</p><p>现在常用的编译器多认为int和long int相同，均为4字节，short为2字节，char为1字节。<br>如果只输入int，它有可能是以上三种形式中的一种。</p><p>那么如何得到某个类型在特定平台上的准确大小？</p><p>为了得到某个类型或某个变量在特定平台上的准确大小，我们可以使用 sizeof 运算符。通过表达式 sizeof(type) 得到对象或类型的存储字节大小。下面的实例演示了获取 int 类型的大小：<br>    <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"int 存储大小 : %lu \n"</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="C语言中的void类型"><a href="#C语言中的void类型" class="headerlink" title="C语言中的void类型"></a>C语言中的void类型</h4><p>void 类型指定没有可用的值。它通常用于以下三种情况下：</p><p>第一种：函数返回为空<br>C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 void exit (int status);</p><p>第二种：函数参数为空<br>C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 int rand(void);</p><p>3    指针指向 void<br>类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数<br><code>void *malloc( size_t size );</code><br>返回指向 void 的指针，可以转换为任何数据类型。</p><h4 id="C语言中的bool（布尔）类型"><a href="#C语言中的bool（布尔）类型" class="headerlink" title="C语言中的bool（布尔）类型"></a>C语言中的bool（布尔）类型</h4><p>在此之前的C语言中，使用整型int来表示真假。在输入时：使用非零值表示真；零值表示假。在输出时：真的值是1，假的值是0。</p><p>现在，出现了布尔型变量。<code>_Bool</code>类型长度为1，只能取值范围为0或1。将任意非零值赋值给<code>_Bool</code>类型，都会先转换为1，表示真。将零值赋值给<code>_Bool</code>类型，结果为0，表示假。</p><p>有如下example program：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;  </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">  _Bool bool1 = 1;</span><br><span class="line">  _Bool bool2 = 2;    /* 非零值，bool2的值为1 */</span><br><span class="line">  _Bool bool3 = 0;</span><br><span class="line">  _Bool bool4 = -1;   /* 非零值，bool4的值为1 */</span><br><span class="line"></span><br><span class="line">  printf(&quot;bool1==%d,  \n&quot;, bool1);</span><br><span class="line">  printf(&quot;bool2==%d,  \n&quot;, bool2);</span><br><span class="line">  printf(&quot;bool3==%d,  \n&quot;, bool3);</span><br><span class="line">  printf(&quot;bool4==%d,  \n&quot;, bool4);</span><br><span class="line"></span><br><span class="line">  printf(&quot;sizeof(_Bool) == %d  \n&quot;, sizeof(_Bool));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bool1==1,</span><br><span class="line">bool2==1,</span><br><span class="line">bool3==0,</span><br><span class="line">bool4==1,</span><br><span class="line">sizeof(_Bool) == 1</span><br></pre></td></tr></table></figure></p><h4 id="C语言中的数组类型"><a href="#C语言中的数组类型" class="headerlink" title="C语言中的数组类型"></a>C语言中的数组类型</h4><p>所有的数组都是由连续的内存位置组成。最低的地址对应第一个元素，最高的地址对应最后一个元素。<br><img src="https://www.runoob.com/wp-content/uploads/2014/08/arrays.jpg%22%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%E7%A4%BA%E4%BE%8B%22" alt="数组结构示例"></p><h4 id="C语言中的指针类型"><a href="#C语言中的指针类型" class="headerlink" title="C语言中的指针类型"></a>C语言中的指针类型</h4><p>每个变量都被存放在从某个内存地址（以字节为单位）开始的若干个字节中。“指针”，也称作“指针变量”，大小为4个字节（或8个字节）的变量，其内容代表一个内存地址。<br>通过指针，我们能够对该指针指向的内存区域进行读写。<br>如果把内存的每个字节都想像成宾馆的一个房间，那么内存地址相当于就是房间号，而指针里存放的，就是房间号。</p><p>T * p ; // T 可以是任何类型的名字，比如 int, double ,char 等等。<br>p 的类型: T *</p><ul><li>p 的类型： T<br>通过表达式 * p，可以读写从地址 p 开始的 sizeof(T)个字节</li><li><em>p</em> 等价于存放在地址p处的一个 T 类型的变量</li><li>意思为间接引用运算符<br>sizeof(T*) 4字节（64位计算机上可能8字节）</li></ul><p>有了指针，就有了自由访问内存空间的手段：<br>不需要通过变量，就能对内存直接进行操作。通过指针，程序能访问的内存区域就不仅限于变量所占据的数据区域。<br>在C中，用指针p指向a的地址,然后对p进行加减操作，p就能指向a后面或前面的内存区域，通过p也就能访问这些内存区域。</p><h4 id="C语言中的字符串类型"><a href="#C语言中的字符串类型" class="headerlink" title="C语言中的字符串类型"></a>C语言中的字符串类型</h4><p>C语言中，字符串有两种形式：</p><ol><li>用双引号括起来的字符串常量， 如”CHINA” ， “C program “。</li><li>存放于字符数组中，以‘\0’字符（ASCII码为0)结尾</li></ol><p>存放于字符数组中的字符串常量占据内存的字节数等于字符串中字符数目加1，多出来的是结尾字符‘\0’。<br>但是字符串的长度不包含’\0’<br>用char数组存放字符串，数组元素个数应该至少为字符串长度+1，以避免数组越界。<br>char数组的内容，可以在初始化时设定，还可以用对数组元素赋值的办法任意改变其中的某个字符。</p><p>“” 也是合法的字符串常量，称为“空串”， 空串仍然会占据一个字节的存储空间，存放 ‘\0’。</p><p>如果字符串常量中包含双引号，则双引号应写为‘&quot;’。而‘\’字符在 字符串中出现时，须连写两次，变成‘\’，以防止转译。</p><h4 id="C语言中的结构类型"><a href="#C语言中的结构类型" class="headerlink" title="C语言中的结构类型"></a>C语言中的结构类型</h4><p>两个同类型的结构变量，可以互相赋值。但是结构变量之间不能用“==”、“!=”、“&lt;”、“&gt;”、“&lt;=”、“&gt;=”进行比较运算。</p><p>一般来说，一个结构变量所占的内存空间的大小，就是结构中所有成员变量大小之和。结构变量中的各个成员变量在内存中一般是连续存放的。</p><p>并且，一个结构的成员变量可以是任何类型的，包括可以是另一个结构类型:</p><h3 id="ASCII码和char类型的关系"><a href="#ASCII码和char类型的关系" class="headerlink" title="ASCII码和char类型的关系"></a>ASCII码和char类型的关系</h3><p>char表示一个字符型数据，其和int在0-255范围内是等价的。而字符编码采用的是ASCII码，所以看起来和ASCII有关。在用char进行输入、输出时其值可以被当成ASCII码，输入、输出函数根据这个码找到相应的字符输入或输出。</p><h2 id="0x02-使用格式化输入输出函数printf-和scanf"><a href="#0x02-使用格式化输入输出函数printf-和scanf" class="headerlink" title="0x02 使用格式化输入输出函数printf()和scanf()"></a>0x02 使用格式化输入输出函数printf()和scanf()</h2><p>在printf和scanf中可以使用以”%”开头的控制符，指明要输入或输出的数据的类型以及格式。<br>常用的格式控制符如下表所示：<br>|常用格式控制符|作 用|<br>|—|—|<br>|%d|读入或输出int变量|<br>|%c|读入或输出char变量|<br>|%f|读入或输出float变量，输出时保留小数点后面6位|<br>|%lf|读入或输出double变量，输出时保留小数点后面6位|<br>|%x|以十六进制读入或输出整型变量|<br>|%lld|读入或输出long long 变量(64位整数）|<br>|%nd|(如%4d,%12d）以n字符宽度输出整数，宽度不足时用空格填充|<br>|%0nd|( 如 %04d,%012d )以n字符宽度输出整数，宽度不足时用0填充|<br>|%.nf|(如%.4f,%.3f） 输出double或float值，精确到小数点后n位|</p><h3 id="scanf的进阶使用"><a href="#scanf的进阶使用" class="headerlink" title="scanf的进阶使用"></a>scanf的进阶使用</h3><p>1.用scanf可以一次读入多个类型不同的变量，只要输入的各项之间用空格分隔即可。<br>example：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="keyword">char</span> c; <span class="keyword">float</span> m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%c%f"</span>,&amp;n,&amp;c,&amp;m);</span><br><span class="line">    <span class="comment">/*依次输入一个整数，一个字符，再一个整数，则它们会被分别放入n,c,m；&amp;n代表“取n的地址"，%c代表等待输入一个字符*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %c %f"</span>,n,c,m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输入：34 k 234.45↙<br>输出：34 k 234.449997</p></blockquote><p>2.若输入的各项之间没有用空格分隔，则等待输入字符时，不会跳过空格(空格也会被当作字符读入)，输入其他类型的数据时，会跳过空格。<br>example：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="keyword">char</span> c; <span class="keyword">float</span> f;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%c%f"</span>,&amp;n,&amp;c,&amp;f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %c %f"</span>,n,c,f);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输入：34 k 456↙<br>输出：34 0.000000</p></blockquote><pre><code>原因：c = &apos; &apos;, 读入f 时，对应输入是&apos;k&apos;，导致出错。</code></pre><p>3.如果在输入中有scanf中出现的非控制字符，则这些字符会被跳过。<br>example：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m; <span class="keyword">char</span> c; <span class="keyword">float</span> f;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %c,%f:%d"</span>,&amp;n,&amp;c,&amp;f,&amp;m);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%c,%f,%d"</span>,n,c,f,m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输入：12 k,3.75:290↙<br>输出：12,k,3.750000,290</p></blockquote><h3 id="有关sprintf-和sscanf-函数"><a href="#有关sprintf-和sscanf-函数" class="headerlink" title="有关sprintf()和sscanf()函数"></a>有关sprintf()和sscanf()函数</h3><p>参考这篇文章:<a href="https://www.cnblogs.com/jikebiancheng/p/6285525.html" target="_blank" rel="noopener">浅析C语言中printf(),sprintf(),scanf(),sscanf()的用法和区别-极客编程-博客园</a></p><h2 id="0x03-分支结构与循环控制结构"><a href="#0x03-分支结构与循环控制结构" class="headerlink" title="0x03 分支结构与循环控制结构"></a>0x03 分支结构与循环控制结构</h2><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="if语句常见错误"><a href="#if语句常见错误" class="headerlink" title="if语句常见错误"></a>if语句常见错误</h4><p>1.错把赋值符当逻辑运算符来使用：<br>example：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( a = <span class="number">0</span> ) <span class="comment">//a = 0的值是0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">if</span>( a = <span class="number">5</span> ) <span class="comment">// a = 5的值是5</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Hi"</span>);</span><br><span class="line"></span><br><span class="line">=&gt; Hi</span><br></pre></td></tr></table></figure><p>2.互相矛盾的多个条件，如果确实只希望执行其中一个分支，应该用if和多个else if，而不要写多个if</p><p>wrong example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( a &gt;=<span class="number">0</span> &amp;&amp; a &lt; <span class="number">5</span> )</span><br><span class="line">a = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span>( a &gt;= <span class="number">5</span> &amp;&amp; a &lt; <span class="number">10</span> )</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">if</span>( a &gt; <span class="number">10</span> &amp;&amp; a &lt; <span class="number">20</span>)</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">if</span>( a &gt;= <span class="number">20</span>)</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>最终会输出hello</p><p>right example：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( a &gt;=<span class="number">0</span> &amp;&amp; a &lt; <span class="number">5</span> )</span><br><span class="line">a = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( a &gt;= <span class="number">5</span> &amp;&amp; a &lt; <span class="number">10</span> )</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( a &gt; <span class="number">10</span> &amp;&amp; a &lt; <span class="number">20</span>)</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>不会输出 hello</p><h4 id="switch语句常见错误"><a href="#switch语句常见错误" class="headerlink" title="switch语句常见错误"></a>switch语句常见错误</h4><p>switch语句在进入某个case分支后，会一直执行到第一个碰到的“break;”，即使这个“break;”是在后面的case分支里面。如果没有碰到“break;”，则会向下一直执行到switch语句末尾的“}”，包括“default:”部分的语句组也会被执行。</p><p>因此，在运用switch语句时，一定要根据题目加上break关键字。</p><h4 id="if-else与switch-case语法的区别"><a href="#if-else与switch-case语法的区别" class="headerlink" title="if-else与switch-case语法的区别"></a>if-else与switch-case语法的区别</h4><p>if语句，if else if语句和switch case语句都属于流程控制语句。</p><p>在只需要判断一个条件的时候，自然是使用if语句方便有效；但是当判断条件很多的时候，我们可以使用多个if语句或者if…else if语句或者switch case语句。</p><p>if…else if语句和多个if语句的区别还是很大的，if…else if在任何一个环节满足条件的时候就将会终止判断，只处理一个满足条件的情况；而对于多个if语句，将会对每一个判断条件进行判断，自然而然会导致程序的执行效率降低。在多个判断条件的情况下，使用if…else if语句相对于使用多个if语句而言，可以减少程序的判断次数，提高效率。</p><p>在多个判断条件的情况下，不仅可以使用if…else if语句，还可以使用switch case语句。一般情况下，当判断条件较多的情况下，使用switch case语句的效率会高于使用if…else if语句。switch…case与if…else if的根本区别在于，switch…case会生成一个跳转表来指示实际的case分支的地址，而这个跳转表的索引号与switch变量的值是相等的。从而，switch…case不用像if…else if那样遍历条件分支直到命中条件，而只需访问对应索引号的表项从而到达定位分支的目的。</p><p>因此，当只有分支比较少的时候，if效率比switch高（因为switch需要生成跳转表）。若分支比较多，那当然是switch更高效也更清晰。</p><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="for循环语句结构特点"><a href="#for循环语句结构特点" class="headerlink" title="for循环语句结构特点"></a>for循环语句结构特点</h4><p><img src="https://cdn.jsdelivr.net/gh/Zam-0703/Pictures/img/for.png" alt="for语句结构"><br>for语句结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( 表达式<span class="number">1</span> ;表达式<span class="number">2</span>;表达式<span class="number">3</span>) &#123;</span><br><span class="line">语句组</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>for循环结构里的“表达式1”和“表达式3”都可以是用逗号连接的若干个表达式。</em></p><h4 id="for循环括号内三个语句的执行时间"><a href="#for循环括号内三个语句的执行时间" class="headerlink" title="for循环括号内三个语句的执行时间"></a>for循环括号内三个语句的执行时间</h4><p>执行过程：</p><p>1) 计算“表达式1”。<br>2) 计算“表达式2”，若其值为true，则执行“{ }”中的语句组，然后转到3)；若为false,则不再执行“{}”中的语句组，for语句结束，转到5)。<br>3) 计算“表达式3”。<br>4) 转到2)。<br>5) 从for语句后面继续往下执行程序。</p><h4 id="for语句的循环控制变量特点"><a href="#for语句的循环控制变量特点" class="headerlink" title="for语句的循环控制变量特点"></a>for语句的循环控制变量特点</h4><p>循环控制变量定义在”表达式1”中，则其只在for语句内部起作用，可以不用担心循环控制变量重名。<br>example：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">26</span>; ++i )&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%c\n"</span>,<span class="keyword">char</span>(<span class="string">'a'</span>+i ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">26</span>; i+=<span class="number">2</span> )&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%c\n"</span>,<span class="keyword">char</span>(<span class="string">'a'</span>+i ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i）;<span class="comment">//此处的i和for里面的i无关</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;最后的一个输出：<span class="number">5</span></span><br><span class="line"></span><br><span class="line">#### <span class="keyword">while</span>循环语句结构特点</span><br><span class="line">```c</span><br><span class="line"><span class="keyword">while</span>(表达式) &#123;</span><br><span class="line">语句组</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若情境是并非到达指定次数，而是满足某条件时即停止循环，则适合用while语句来实现循环。</p><h4 id="while循环的执行过程"><a href="#while循环的执行过程" class="headerlink" title="while循环的执行过程"></a>while循环的执行过程</h4><p>1) 判断“表达式”是否为真，如果不为真，则转4)<br>2) 执行“语句组”<br>3) 转1)<br>4) while语句结束，继续执行while语句后面的语句。</p><h4 id="do……while循环语句结构特点"><a href="#do……while循环语句结构特点" class="headerlink" title="do……while循环语句结构特点"></a>do……while循环语句结构特点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">语句组</span><br><span class="line">&#125; <span class="keyword">while</span>(表达式);</span><br></pre></td></tr></table></figure><p>如果希望循环至少要执行一次，就可以使用do…while语句。</p><h4 id="do……while循环语句的执行过程"><a href="#do……while循环语句的执行过程" class="headerlink" title="do……while循环语句的执行过程"></a>do……while循环语句的执行过程</h4><p>每执行一次循环后，都要判断“表达式”的值是否为真，如果真就继续循环，如果为假，就停止循环。</p><h4 id="while和do……while语句的区别"><a href="#while和do……while语句的区别" class="headerlink" title="while和do……while语句的区别"></a>while和do……while语句的区别</h4><p>while先判断后执行，do while先执行后判断<br>当不满足循环条件时，while循环一次都不会执行，do while循环至少执行一次</p><h4 id="break与continue语句"><a href="#break与continue语句" class="headerlink" title="break与continue语句"></a>break与continue语句</h4><p>break语句可以出现在循环体中(for、while、do…while循环均可)，其作用是跳出循环。<br>并且在多重循环的情况下，break语句只能跳出直接包含它的那一重循环。</p><p>example:<br><em>找兄弟数</em>：如果两个不同的正整数，他们的和是他们的积的因子，就称这两个数为兄弟数，小的称为弟数，大的称为兄数。先后输入正整数n和m(n &lt; m) , 请在n至m这m-n+1个数中，找出一对兄弟数。如果找不到，就输出“No Solution.”。如果能找到，就找出和最小的那一对；如果有多对兄弟数和相同且都是最小，就找出弟数最小的那一对。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m );</span><br><span class="line">    <span class="keyword">int</span> a = m + <span class="number">1</span>,b = m + <span class="number">1</span>; <span class="comment">//a,b记录已经找到的最佳兄弟数，a是弟数，b是兄数</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = n; i &lt; m ; ++i ) &#123;  <span class="comment">//取弟数，共m-n种取法</span></span><br><span class="line">      <span class="keyword">if</span>( i &gt; (a + b)/<span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">break</span>; <span class="comment">// 跳出外重循环</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= m; ++j ) &#123; <span class="comment">//取兄数</span></span><br><span class="line">          <span class="keyword">if</span>( i + j &gt; a + b ) <span class="keyword">break</span>; <span class="comment">// 跳出内重循环</span></span><br><span class="line">          <span class="keyword">if</span>( i * j % (i + j) == <span class="number">0</span> ) &#123; <span class="comment">//发现兄弟数</span></span><br><span class="line">            <span class="keyword">if</span>( i + j &lt; a + b) &#123; <span class="comment">//发现和更小的兄弟数</span></span><br><span class="line">              a = i; b = j ; <span class="comment">//更新已找到的最佳兄弟数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>( i + j == a + b &amp;&amp; i &lt; a)</span><br><span class="line">              <span class="comment">//发现和相同但弟数更小的兄弟数</span></span><br><span class="line">              a = i; b = j; <span class="comment">//更新已找到的最佳兄弟数</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>( a == m + <span class="number">1</span> ) <span class="comment">//没找到兄弟数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"No solution."</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>,a,b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>continue语句可以出现在循环体中(for、while、do…while循环均可)，其作用是立即结束本次循环，并回到循环开头判断是否要进行下一次循环。<br>在多重循环的情况下，continue只对直接包含它的那重循环起作用。</p><p>example：<br><em>找10以内的偶数</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span> ;++i ) &#123;</span><br><span class="line">    <span class="keyword">if</span>( i % <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">continue</span>; <span class="comment">//导致不执行后面的语句，回到循环开头</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d,"</span>,i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出：2,4,6,8,10,</p></blockquote><h2 id="0x04-初始化数组"><a href="#0x04-初始化数组" class="headerlink" title="0x04 初始化数组"></a>0x04 初始化数组</h2><h3 id="一维数字数组的初始化"><a href="#一维数字数组的初始化" class="headerlink" title="一维数字数组的初始化"></a>一维数字数组的初始化</h3><p>在通过<code>type arrayName [ arraySize ];</code>语句声明数组之后，需要对数组进行初始化。</p><p>在 C 中，我们可以逐个初始化数组，也可以使用一个初始化语句，如下所示：<br>    <code>int test[5] = {1, 2, 3, 4, 5};</code></p><p>需要注意的是，声明数组时方括号内的数字代表的是数组长度。数组的元素都是从0开始标号的，因此数组的第一个元素是arrayName[0],最后一个元素是arrayName[数组的总大小减去 1]。需要牢记这一点以免发生数组越界情况。</p><p>例如，有以下程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  </span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> Lenth 5</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> test[Lenth] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Lenth; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"test数组的第%d个元素为%d,\n"</span>, i+<span class="number">1</span>, test[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：<br>    &gt;test数组的第1个元素为1,<br>    test数组的第2个元素为2,<br>    test数组的第3个元素为3,<br>    test数组的第4个元素为4,<br>    test数组的第5个元素为5,</p><p><strong>大括号 { } 之间的值的数目不能大于我们在数组声明时在方括号 [ ] 中指定的元素数目。</strong></p><p><strong>若是大括号{ }之间的值小于我们在数组声明时在方括号中指定的元素数目，则没有值与之对应的数组元素自动赋0</strong></p><p><strong>只能给元素逐个赋值，不能给数组整体赋值。例如给十个元素全部赋1值，只能写为：int a[10]={1,1,1,1,1,1,1,1,1,1};而不能写为：int a[10]=1.</strong></p><p><strong>如不给可初始化的数组赋初值，则全部元素均为0值。</strong></p><p>以上规则也适用于 <strong>其他类型的数组</strong><br>例如，有以下程序：<br>    <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  </span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> Lenth 6</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> test[Lenth] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Lenth; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"test数组的第%d个元素为%d,\n"</span>, i+<span class="number">1</span>, test[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果为：<br>    &gt;test数组的第1个元素为1,<br>    test数组的第2个元素为2,<br>    test数组的第3个元素为3,<br>    test数组的第4个元素为4,<br>    test数组的第5个元素为5,<br>    test数组的第6个元素为0,</p><p>如果在初始化时省略掉了数组的大小，数组的大小则为初始化时元素的个数。因此，如果我们初始化：<code>int test[] = {1, 2, 3, 4, 5};</code><br>那么创建的这个数组，它与前一个例子中所创建的数组是完全相同的。</p><h3 id="一维字符数组的初始化"><a href="#一维字符数组的初始化" class="headerlink" title="一维字符数组的初始化"></a>一维字符数组的初始化</h3><p>C语言允许用字符串的方式对数组作初始化赋值。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">9</span>]=&#123;<span class="string">'c'</span>,<span class="string">' '</span>,<span class="string">'p'</span>,<span class="string">'r'</span>,<span class="string">'o'</span>,<span class="string">'g'</span>,<span class="string">'r'</span>,<span class="string">'a'</span>,<span class="string">'m'</span>&#125;;</span><br></pre></td></tr></table></figure><p>可写为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">10</span>]=&#123;<span class="string">"C program"</span>&#125;; 或去掉&#123;&#125;写为：</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">10</span>]=<span class="string">"C program"</span>;</span><br></pre></td></tr></table></figure><p>需要注意的是，用字符串给字符数组赋值时由于要添加结束符 ‘<code>\0</code>‘，数组的长度要比字符串的长度（字符串长度不包括 ‘<code>\0&#39;</code>）大1。例如：<br>char str[] = “C program”;<br>该数组在内存中的实际存放情况为：<br><img src="http://c.biancheng.net/cpp/uploads/allimg/120129/sfdsgfsge.png" alt="数组在内存中的存放情况"><br>字符串长度为 9，数组长度为 10。<br>因此我们需要增加一个字符数组长度用来存放\0。</p><p>并且，上述这种字符数组的整体赋值只能在字符数组初始化时使用，不能用于字符数组的赋值，字符数组的赋值只能对其元素一一赋值，下面的赋值方法是错误的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[];</span><br><span class="line">str=<span class="string">"I am happy"</span>;<span class="comment">//错误，字符数组的赋值只能按元素一一赋值</span></span><br></pre></td></tr></table></figure><p>当对全体元素赋初值时也可以省去长度说明。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[]=&#123;<span class="string">'c'</span>,<span class="string">' '</span>,<span class="string">'p'</span>,<span class="string">'r'</span>,<span class="string">'o'</span>,<span class="string">'g'</span>,<span class="string">'r'</span>,<span class="string">'a'</span>,<span class="string">'m'</span>&#125;;</span><br></pre></td></tr></table></figure><p>这时C数组的长度自动定为9。</p><h3 id="二维数字数组的初始化"><a href="#二维数字数组的初始化" class="headerlink" title="二维数字数组的初始化"></a>二维数字数组的初始化</h3><p>example：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">80</span>,<span class="number">75</span>,<span class="number">92</span>&#125;,&#123;<span class="number">61</span>,<span class="number">65</span>&#125;,&#123;<span class="number">59</span>,<span class="number">63</span>,<span class="number">70</span>&#125;,&#123;<span class="number">85</span>,<span class="number">90</span>&#125;,&#123;<span class="number">76</span>,<span class="number">77</span>,<span class="number">85</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p>每个内层的{}，初始化数组中的一行。<br>同样地，二维数组初始化时，如果对每行都进行了初始化，则也可以不给出行数:<br>example：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[][<span class="number">3</span>]=&#123; &#123;<span class="number">80</span>,<span class="number">75</span>,<span class="number">92</span>&#125;,&#123;<span class="number">61</span>,<span class="number">65</span>&#125; &#125;;</span><br></pre></td></tr></table></figure><p>a 是一个2行3列的数组，a[1][2]被初始化成0。</p><h3 id="二维字符数组的初始化"><a href="#二维字符数组的初始化" class="headerlink" title="二维字符数组的初始化"></a>二维字符数组的初始化</h3><p>通常情况下，二维数组的每一行分别使用一个字符串进行初始化。 例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">3</span>][<span class="number">8</span>]=&#123;&#123;<span class="string">"apple"</span>&#125;,&#123;<span class="string">"orange"</span>&#125;,&#123;<span class="string">"banana"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">3</span>][<span class="number">8</span>]=&#123;<span class="string">"apple"</span>,<span class="string">"orange"</span>,<span class="string">"banana"</span>&#125;;</span><br></pre></td></tr></table></figure><p>以上两条初始化语句中，二维数组的第一维大小均可省略。数组 c 的逻辑结构如下所示：<br>| |0|1|2|3|4|5|6|7|<br>|–|–|–|–|–|–|–|–|–|<br>|c[0]|a|p|p|l|e|\0|\0|\0|<br>|c[1]|o|r|a|n|g|e|\0|\0|<br>|c[2]|b|a|n|a|n|a|\0|\0|</p><h3 id="二维数字数组的存放方式"><a href="#二维数字数组的存放方式" class="headerlink" title="二维数字数组的存放方式"></a>二维数字数组的存放方式</h3><p>数组T a[N][M] 每一行都有M个元素<br>第i行的元素就是a[i][0]、a[i][1]……a[i][M-1]。<br>同一行的元素，在内存中是连续存放的。<br>第j列的元素的元素，就是a[0][j]、a[1][j]……a[N-1][j]。<br>a[0][0]是数组中地址最小的元素。如果a[0][0]存放在地址n，则a[i][j]存放的地址就是：n + i × M× sizeof(T) + j × sizeof(T)</p><h3 id="数组越界"><a href="#数组越界" class="headerlink" title="数组越界"></a>数组越界</h3><p>数组元素的下标，可以是任何整数，可以是负数，也可以大于数组的元素个数。不会导致编译错误：<br>example：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">a[<span class="number">-2</span>] = <span class="number">5</span>;</span><br><span class="line">a[<span class="number">200</span>] = <span class="number">10</span>;</span><br><span class="line">a[<span class="number">10</span>] = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> m = a[<span class="number">30</span>];</span><br></pre></td></tr></table></figure><p>但运行时很可能会出错!<br>a[-2] = 5; a[200] = 10; a[10] = 20;int m = a[30];均可能导致程序运行出错！！！<br>因为可能引起意外修改其他变量的值，导致程序运行结果不正确<br>可能试图访问不该访问的内存区域，导致程序崩溃<br>数组越界的程序，用某些编译器编译后可能可以正确运行，换一个编译器编译后就运行错误<br>最可怕的是，编译器不会报错。</p><p>因此，我们在使用数组时，最好能初始化/声明地大一些</p><h2 id="0x05-标识符的作用域，结构体"><a href="#0x05-标识符的作用域，结构体" class="headerlink" title="0x05 标识符的作用域，结构体"></a>0x05 标识符的作用域，结构体</h2><h3 id="标识符的作用域"><a href="#标识符的作用域" class="headerlink" title="标识符的作用域"></a>标识符的作用域</h3><h4 id="C语言中的全局变量、局部变量、静态变量"><a href="#C语言中的全局变量、局部变量、静态变量" class="headerlink" title="C语言中的全局变量、局部变量、静态变量"></a>C语言中的全局变量、局部变量、静态变量</h4><p>要想学习变量的作用域，首先要搞懂C中的全局变量、局部变量、静态变量</p><p>局部变量：定义在函数内部的变量叫局部变量（函数的形参也是局部变量）</p><p>全局变量：定义在所有函数的外面的变量叫全局变量<br>全局变量在所有函数中均可以使用，局部变量只能在定义它的函数内部使用</p><p>静态变量：全局变量都是静态变量。局部变量定义时如果前面加了“static”关键字，则该变量也成为静态变量<br>静态变量的存放地址，在整个程序运行期间，都是固定不变的<br>非静态变量(一定是局部变量)地址每次函数调用时都可能不同,在函数的一次执行期间不变<br>如果未明确初始化，则静态变量会被自动初始化成全0(每个bit都是0），局部非静态变量的值则随机</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>变量名、函数名、类型名统称为“标识符”。一个标识符能够起作用的范围，叫做该标识符的作用域</p><p>在一个标识符的作用域之外使用该标识符，会导致“标识符没有定义”的编译错误。使用标识符的语句，必须出现在它们的声明或定义之后<br>在单文件的程序中，结构、函数和全局变量的作用域是其定义所在的整个文件</p><p>函数形参的作用域是整个函数<br>局部变量的作用域，是从定义它的语句开始，到包含它的最内层的那一对大括号“{}”的右大括号 “}”为止。<br>for循环里定义的循环控制变量，其作用域就是整个for循环<br>同名标示符的作用域，可能一个被另一个包含。则在小的作用域里，作用域大的那个标识符被屏蔽，不起作用。</p><h4 id="生存期"><a href="#生存期" class="headerlink" title="生存期"></a>生存期</h4><p>所谓变量的“生存期”，指的是在此期间，变量占有内存空间，其占有的内存空间只能归它使用，不会被用来存放别的东西。<br>而变量的生存期终止，就意味着该变量不再占有内存空间，它原来占有的内存空间，随时可能被派做他用。</p><p>全局变量的生存期，从程序被装入内存开始，到整个程序结束。<br>静态局部变量的生存期，从定义它语句第一次被执行开始，到整个程序结束为止。<br>函数形参的生存期从函数执行开始，到函数返回时结束。非静态局部变量的生存期，从执行到定义它的语句开始，一旦程序执行到了它的作用域之外，其生存期就终止。</p><h3 id="使用struct定义结构体"><a href="#使用struct定义结构体" class="headerlink" title="使用struct定义结构体"></a>使用struct定义结构体</h3><p>我们可以使用“struct”关键字来定义一个“结构”，也就是说定义了一个新的结构数据类型：<br>定义方式:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">类型名 成员变量名；</span><br><span class="line">类型名 成员变量名；</span><br><span class="line">类型名 成员变量名；</span><br><span class="line">……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ID;</span><br><span class="line"><span class="keyword">char</span> Name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">float</span> GPA;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在经过这条语句之后Student 即成为自定义类型的名字，可以用来定义变量<br><code>Stuent s1,s2;</code></p><h3 id="使用结构体获得、写入结构体内部的成员变量"><a href="#使用结构体获得、写入结构体内部的成员变量" class="headerlink" title="使用结构体获得、写入结构体内部的成员变量"></a>使用结构体获得、写入结构体内部的成员变量</h3><p>一个结构变量的成员变量，可以完全和一个普通变量一样来使用，也可以取得其地址。使用形式：<br>  结构变量名.成员变量名<br>example：对于以下定义的StudentEx与Date结构体数据类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line"><span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StudentEx</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ID;</span><br><span class="line"><span class="keyword">char</span> Name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">float</span> GPA;</span><br><span class="line">Date birthday;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们可以运行以下的main()代码段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StudentEx stu;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;stu.GPA);</span><br><span class="line">stu.ID = <span class="number">12345</span>;</span><br><span class="line">stu.Name[]=&#123;<span class="string">'Z'</span>,<span class="string">'a'</span>,<span class="string">'m'</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f"</span>,stu.GPA);</span><br><span class="line">stu.birthday.year = <span class="number">1984</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> * p = &amp; stu.ID; <span class="comment">//p指向stu中的ID成员变量</span></span><br></pre></td></tr></table></figure><h3 id="结构变量的初始化"><a href="#结构变量的初始化" class="headerlink" title="结构变量的初始化"></a>结构变量的初始化</h3><p>结构变量可以在定义时进行初始化:<br>例如对上面的例子，我们可以通过以下语句对结构变量进行初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StudentEx stu = &#123; <span class="number">1234</span>,<span class="string">"Tom"</span>,<span class="number">3.78</span>,&#123; <span class="number">1984</span>,<span class="number">12</span>,<span class="number">28</span> &#125;&#125;;</span><br></pre></td></tr></table></figure><h3 id="指向结构变量的指针"><a href="#指向结构变量的指针" class="headerlink" title="指向结构变量的指针"></a>指向结构变量的指针</h3><h4 id="定义指向结构变量的指针"><a href="#定义指向结构变量的指针" class="headerlink" title="定义指向结构变量的指针"></a>定义指向结构变量的指针</h4><p>方式：<br><code>结构名 * 指针变量名;</code><br>example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StudentEx * pStudent;<span class="comment">//定义了* pStudent为StudentEx类型的指针</span></span><br><span class="line">StudentEx Stu1;</span><br><span class="line">pStudent = &amp; Stu1;<span class="comment">//使得pStudent指针指向stu1变量的起始位置</span></span><br><span class="line">StudentEx Stu2 = * pStudent; <span class="comment">//将pStudent指针指向的stu1变量赋值给stu2变量</span></span><br></pre></td></tr></table></figure><h4 id="通过指针，访问其指向的结构变量的成员变量"><a href="#通过指针，访问其指向的结构变量的成员变量" class="headerlink" title="通过指针，访问其指向的结构变量的成员变量"></a>通过指针，访问其指向的结构变量的成员变量</h4><p>方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">指针-&gt;成员变量名</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">(* 指针).成员变量名</span><br></pre></td></tr></table></figure><p>example:<br>对于‘使用结构体获得、写入结构体内部的成员变量’中定义的结构体<br>可以使用以下语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StudentEx Stu;</span><br><span class="line">StudentEx * pStu;</span><br><span class="line">pStu = &amp; Stu;</span><br><span class="line">pStu-&gt;ID = <span class="number">12345</span>;</span><br><span class="line">( * pStu).GPA = <span class="number">3.48</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Stu.ID) <span class="comment">//输出 12345</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>,Stu.GPA); <span class="comment">//输出 3.48</span></span><br></pre></td></tr></table></figure><h2 id="0x06-C语言函数"><a href="#0x06-C语言函数" class="headerlink" title="0x06 C语言函数"></a>0x06 C语言函数</h2><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><p>一般来说函数的定义必须出现在函数调用语句之前，否则调用语句编译出错<br>函数的定义方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名(参数1类型 参数1名称, 参数2类型 参数2名称……)</span><br><span class="line">&#123;</span><br><span class="line">语句组(即“函数体”）</span><br><span class="line">return 返回值；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数不需要返回值，则“返回值类型”可以写“void”</p><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><p>调用函数语句：<br><code>函数名（参数1,参数2，……）</code></p><h3 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h3><p>对函数的调用，也是一个表达式。函数调用表达式的值，由函数内部的return语句决定。<br>return语句语法如下：<br><code>return 返回值；</code><br>return语句的功能是结束函数的执行，并将“返回值”作为结果返回。“返回值”是常量、变量或复杂的表达式均可。<br>如果函数返回值类型为“void”，return语句就直接写：<br><code>return ;</code><br>需要注意的是，return 语句作为函数的出口，可以在函数中多次出现。多个return语句的“返回值”可以不同。在哪个return语句结束函数，函数的返回值就和哪个return语句里面的“返回值”相等。</p><h2 id="0x07-C语言的指针"><a href="#0x07-C语言的指针" class="headerlink" title="0x07 C语言的指针"></a>0x07 C语言的指针</h2><h3 id="C语言指针的定义"><a href="#C语言指针的定义" class="headerlink" title="C语言指针的定义"></a>C语言指针的定义</h3><p>T * p ; // T 可以是任何类型的名字，比如 int, double ,char 等等。<br>p 的类型:  T * *p 的类型： T<br>通过表达式 * p，可以读写从地址p开始的 sizeof(T)个字节<br>*p 等价于存放在地址p处的一个 T 类型的变量</p><ul><li>间接引用运算符 sizeof(T*)   4字节（64位计算机上可能8字节）<h3 id="指针的用法"><a href="#指针的用法" class="headerlink" title="指针的用法"></a>指针的用法</h3>&amp; : 取地址运算符<br>&amp;x : 变量x的地址（即指向x的指针)<br>对于类型为 T 的变量 x，&amp;x  表示变量 x 的地址(即指向x的指针) &amp;x  的类型是 T * 。<br>example：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch1 = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">char</span> * pc = &amp;ch1; <span class="comment">// 使得pc 指向变量ch1</span></span><br><span class="line"> * pc = <span class="string">'B'</span>; <span class="comment">// 使得ch1 = 'B'</span></span><br><span class="line"> <span class="keyword">char</span> ch2 = * pc;  <span class="comment">// 使得ch2 = ch1</span></span><br><span class="line"> pc = &amp; ch2; <span class="comment">// 使得pc 指向变量ch2</span></span><br><span class="line"> * pc = <span class="string">'D'</span>; <span class="comment">// 使得ch2 = 'D'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="指针的赋值"><a href="#指针的赋值" class="headerlink" title="指针的赋值"></a>指针的赋值</h3><p> <strong>不同类型的指针，如果不经过强制类型转换，不能直接互相赋值</strong><br>example：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * pn, <span class="keyword">char</span> * pc, <span class="keyword">char</span> c = <span class="number">0x65</span>;</span><br><span class="line">pn = pc; <span class="comment">//类型不匹配，编译出错</span></span><br><span class="line">pn = &amp; c; <span class="comment">//类型不匹配，编译出错</span></span><br><span class="line">pn = (<span class="keyword">int</span> * ) &amp; c;</span><br><span class="line"><span class="keyword">int</span> n = * pn; <span class="comment">//n值不确定</span></span><br><span class="line">* pn = <span class="number">0x12345678</span>; <span class="comment">//编译能过但运行可能出错</span></span><br></pre></td></tr></table></figure><h3 id="指针的运算"><a href="#指针的运算" class="headerlink" title="指针的运算"></a>指针的运算</h3><p>1） 两个 <strong>同类型</strong> 的指针变量，可以比较大小</p><p>若地址p1&lt;地址p2，则 p1&lt; p2   值为真。<br>若地址p1=地址p2，则 p1== p2  值为真。<br>若地址p1&gt;地址p2，则 p1 &gt; p2  值为真。</p><p>2) 两个 <strong>同类型</strong> 的指针变量，可以相减</p><p>运算规则：<br>两个T * 类型的指针 p1和p2<br>p1 – p2 = ( 地址p1 – 地址 p2 ) / sizeof(T)</p><p>例：int * p1, * p2;<br>若 p1 指向地址 2000,p2 指向地址 600, 则<br>p1 – p2 = (1000 – 600)/sizeof(int) = (2000 – 600)/4 = 350</p><p>3)指针变量加减一个整数的结果是指针</p><p>例如：<br>p :    T * 类型的指针<br>n :    整数类型的变量或常量</p><p>则p+n :  T * 类型的指针，指向地址： 地址p + n × sizeof(T)<br>n+p,  p-n , * (p+n), * (p-n)等同理</p><p>4) 指针变量可以自增、自减</p><p>若T* 类型的指针p指向地址n<br>则p++, ++p :  p指向 n + sizeof(T) p–, –p :  p指向 n - sizeof(T)</p><p>5）指针可以用下标运算符“[ ]”进行运算<br>若p 是一个 T * 类型的指针， n 是整数类型的变量或常量<br>则p[n] 等价于 * (p+n)</p><h2 id="Task-End"><a href="#Task-End" class="headerlink" title="Task End"></a>Task End</h2>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> AST of EIC,HUST </tag>
            
            <tag> Task </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/04/hello-world/"/>
      <url>/2019/10/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
